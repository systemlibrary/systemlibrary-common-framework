{
  "SystemLibrary.Common.Framework_index.html": {
    "href": "SystemLibrary.Common.Framework_index.html",
    "title": "[%projectDisplayName%]",
    "summary": "[%projectDisplayName%] [%navigation%]"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.ActionContextInstance.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.ActionContextInstance.html",
    "title": "ActionContextInstance",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.App.dll An implementation of the 'old' thread safe singleton ActionContext we all know and love from .NET Framework ActionContextInstance public static class ActionContextInstance Inheritance object ActionContextInstance Examples Arguments X Properties Get the current Action Context instance Remarks X Do note that Action Context can be null in a console application or in a 'Unit' Test Application or if MVC is not yet registered as a service/invoked public static ActionContext Current { get; } X var actionContext = ActionContextInstance.Current; X Property Value Type Description ActionContext let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.ApiTokenFilterAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.ApiTokenFilterAttribute.html",
    "title": "ApiTokenFilterAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework.App.Attributes SystemLibrary.Common.Framework.App.dll Filters access based on api-token header Optional: set a custom token header name Input: `null`: Allows all `*`: Allows all - A regex: Value must satisfy the regex pattern - A pipe separated list: Any part is within the Value in a case insensitive check `text`: Value must match, case sensitive Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive ApiTokenFilterAttribute public class ApiTokenFilterAttribute : BaseApiFilterAttribute, IActionFilter, IAsyncActionFilter, IResultFilter, IAsyncResultFilter, IOrderedFilter, IFilterMetadata Inheritance object Attribute ActionFilterAttribute BaseApiFilterAttribute ApiTokenFilterAttribute Implements IActionFilter IAsyncActionFilter IResultFilter IAsyncResultFilter IOrderedFilter IFilterMetadata Inherited Members BaseApiFilterAttribute.RequestHasValidHeaderValue(string, string) BaseApiFilterAttribute.OnAccessDenied(ActionExecutingContext, string) ActionFilterAttribute.OnActionExecuted(ActionExecutedContext) ActionFilterAttribute.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) ActionFilterAttribute.OnResultExecuting(ResultExecutingContext) ActionFilterAttribute.OnResultExecuted(ResultExecutedContext) ActionFilterAttribute.OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) ActionFilterAttribute.Order Examples X [ApiTokenFilter(null)] // Allows all [ApiTokenFilter(\"*\")] // Allows all [ApiTokenFilter(\"^[ab0-4]{4,}$\")] // Passing a regex - allow any tokens containing `a, b, 0, 1, 2, 3 or 4` with a minimum length of 4 [ApiTokenFilter(\"SystemLibrary.com\")] // Exact match of SystemLibrary.com, case sensitive [ApiTokenFilter(\"test.systemlibrary.com|test2.systemlibrary.com\")] // String contains delimited by | allows test.systemlibrary.com or test2.systemlibrary.com anywhere, case insensitive Arguments X Constructors match: either a regex, an exact string, or strings delimited by | Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive public ApiTokenFilterAttribute(string match, string headerName = \"api-token\") X Methods arguments Type Name Description string match string headerName Methods Called before the action executes, after model binding is complete. Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive public override void OnActionExecuting(ActionExecutingContext context) X Methods arguments Type Name Description ActionExecutingContext context The ActionExecutingContext. Overrides ActionFilterAttribute.OnActionExecuting(ActionExecutingContext) Implements IActionFilter IAsyncActionFilter IResultFilter IAsyncResultFilter IOrderedFilter IFilterMetadata Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.BaseApiFilterAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.BaseApiFilterAttribute.html",
    "title": "BaseApiFilterAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework.App.Attributes SystemLibrary.Common.Framework.App.dll BaseApiFilterAttribute public class BaseApiFilterAttribute : ActionFilterAttribute, IActionFilter, IAsyncActionFilter, IResultFilter, IAsyncResultFilter, IOrderedFilter, IFilterMetadata Inheritance object Attribute ActionFilterAttribute BaseApiFilterAttribute ApiTokenFilterAttribute OriginFilterAttribute UserAgentFilterAttribute Implements IActionFilter IAsyncActionFilter IResultFilter IAsyncResultFilter IOrderedFilter IFilterMetadata Inherited Members ActionFilterAttribute.OnActionExecuting(ActionExecutingContext) ActionFilterAttribute.OnActionExecuted(ActionExecutedContext) ActionFilterAttribute.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) ActionFilterAttribute.OnResultExecuting(ResultExecutingContext) ActionFilterAttribute.OnResultExecuted(ResultExecutedContext) ActionFilterAttribute.OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) ActionFilterAttribute.Order Examples Arguments X Methods protected void OnAccessDenied(ActionExecutingContext context, string message) X Methods arguments Type Name Description ActionExecutingContext context string message protected bool RequestHasValidHeaderValue(string match, string value) X Methods arguments Type Name Description string match string value X Type Description bool Implements IActionFilter IAsyncActionFilter IResultFilter IAsyncResultFilter IOrderedFilter IFilterMetadata Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.OriginFilterAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.OriginFilterAttribute.html",
    "title": "OriginFilterAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework.App.Attributes SystemLibrary.Common.Framework.App.dll Filters access based on Origin header Input: `null`: Allows all `*`: Allows all - A regex: Value must satisfy the regex pattern - A pipe separated list: Any part is within the Value in a case insensitive check `text`: Value must match, case sensitive [OriginFilter(null)] // Allows all [OriginFilter(\"*\")] // Allows all [OriginFilter(\"^[ab0-4]{4,}$\")] // Allow origin containing `a, b, 0, 1, 2, 3 or 4` with a minimum length of 4 [OriginFilter(\"SystemLibrary\\.com\")] // Exact match of SystemLibrary.com, case sensitive [OriginFilter(\"test.systemlibrary\\.com|test2.systemlibrary.com\")] // Allow origins containing test.systemlibrary.com or test2.systemlibrary.com, case insensitive Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive OriginFilterAttribute public class OriginFilterAttribute : BaseApiFilterAttribute, IActionFilter, IAsyncActionFilter, IResultFilter, IAsyncResultFilter, IOrderedFilter, IFilterMetadata Inheritance object Attribute ActionFilterAttribute BaseApiFilterAttribute OriginFilterAttribute Implements IActionFilter IAsyncActionFilter IResultFilter IAsyncResultFilter IOrderedFilter IFilterMetadata Inherited Members BaseApiFilterAttribute.RequestHasValidHeaderValue(string, string) BaseApiFilterAttribute.OnAccessDenied(ActionExecutingContext, string) ActionFilterAttribute.OnActionExecuted(ActionExecutedContext) ActionFilterAttribute.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) ActionFilterAttribute.OnResultExecuting(ResultExecutingContext) ActionFilterAttribute.OnResultExecuted(ResultExecutedContext) ActionFilterAttribute.OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) ActionFilterAttribute.Order Examples Arguments X Constructors match: either a regex, an exact string, or strings delimited by | Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive public OriginFilterAttribute(string match = null) X Methods arguments Type Name Description string match Methods Called before the action executes, after model binding is complete. Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive public override void OnActionExecuting(ActionExecutingContext context) X Methods arguments Type Name Description ActionExecutingContext context The ActionExecutingContext. Overrides ActionFilterAttribute.OnActionExecuting(ActionExecutingContext) Implements IActionFilter IAsyncActionFilter IResultFilter IAsyncResultFilter IOrderedFilter IFilterMetadata Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.UserAgentFilterAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.UserAgentFilterAttribute.html",
    "title": "UserAgentFilterAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework.App.Attributes SystemLibrary.Common.Framework.App.dll Filters access based on User-Agent header NOTE: If attribute is added it blocks most known spiders, crawlers and bots even if you allow all Input: `null`: Allows all `*`: Allows all - A regex: Value must satisfy the regex pattern - A pipe separated list: Any part is within the Value in a case insensitive check `text`: Value must match, case sensitive [UserAgentFilter(null)] // Allows all [UserAgentFilter(\"*\")] // Allows all [UserAgentFilter(\"^[ab0-4]{4,}$\")] // Allow user agents containing only `a, b, 0, 1, 2, 3 or 4` with a minimum length of 4 [UserAgentFilter(\"User Agent\")] // Exact match of 'User Agent', case sensitive [UserAgentFilter(\"firefox|edg|chrome\")] // Allow user agents containing firefox or edg or chrome, case insensitive Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive UserAgentFilterAttribute public class UserAgentFilterAttribute : BaseApiFilterAttribute, IActionFilter, IAsyncActionFilter, IResultFilter, IAsyncResultFilter, IOrderedFilter, IFilterMetadata Inheritance object Attribute ActionFilterAttribute BaseApiFilterAttribute UserAgentFilterAttribute Implements IActionFilter IAsyncActionFilter IResultFilter IAsyncResultFilter IOrderedFilter IFilterMetadata Inherited Members BaseApiFilterAttribute.RequestHasValidHeaderValue(string, string) BaseApiFilterAttribute.OnAccessDenied(ActionExecutingContext, string) ActionFilterAttribute.OnActionExecuted(ActionExecutedContext) ActionFilterAttribute.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) ActionFilterAttribute.OnResultExecuting(ResultExecutingContext) ActionFilterAttribute.OnResultExecuted(ResultExecutedContext) ActionFilterAttribute.OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) ActionFilterAttribute.Order Examples Arguments X Constructors match: either a regex, an exact string, or strings delimited by | Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive public UserAgentFilterAttribute(string match = null) X Methods arguments Type Name Description string match Methods Called before the action executes, after model binding is complete. Remarks X Validating as a regex expression requires any of these characters: ^$*?[ Validate case insensitive with a string.Contains match requires at least one delimiter | Falls back to normal string equals comparison, case sensitive public override void OnActionExecuting(ActionExecutingContext context) X Methods arguments Type Name Description ActionExecutingContext context The ActionExecutingContext. Overrides ActionFilterAttribute.OnActionExecuting(ActionExecutingContext) Implements IActionFilter IAsyncActionFilter IResultFilter IAsyncResultFilter IOrderedFilter IFilterMetadata Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Attributes.html",
    "title": "SystemLibrary.Common.Framework.App.Attributes",
    "summary": "SystemLibrary.Common.Framework.App.Attributes Classes ApiTokenFilterAttribute Filters access based on api-token header Optional: set a custom token header name Input: `null`: Allows all `*`: Allows all - A regex: Value must satisfy the regex pattern - A pipe separated list: Any part is within the Value in a case insensitive check `text`: Value must match, case sensitive BaseApiFilterAttribute OriginFilterAttribute Filters access based on Origin header Input: `null`: Allows all `*`: Allows all - A regex: Value must satisfy the regex pattern - A pipe separated list: Any part is within the Value in a case insensitive check `text`: Value must match, case sensitive [OriginFilter(null)] // Allows all [OriginFilter(\"*\")] // Allows all [OriginFilter(\"^[ab0-4]{4,}$\")] // Allow origin containing `a, b, 0, 1, 2, 3 or 4` with a minimum length of 4 [OriginFilter(\"SystemLibrary\\.com\")] // Exact match of SystemLibrary.com, case sensitive [OriginFilter(\"test.systemlibrary\\.com|test2.systemlibrary.com\")] // Allow origins containing test.systemlibrary.com or test2.systemlibrary.com, case insensitive UserAgentFilterAttribute Filters access based on User-Agent header NOTE: If attribute is added it blocks most known spiders, crawlers and bots even if you allow all Input: `null`: Allows all `*`: Allows all - A regex: Value must satisfy the regex pattern - A pipe separated list: Any part is within the Value in a case insensitive check `text`: Value must match, case sensitive [UserAgentFilter(null)] // Allows all [UserAgentFilter(\"*\")] // Allows all [UserAgentFilter(\"^[ab0-4]{4,}$\")] // Allow user agents containing only `a, b, 0, 1, 2, 3 or 4` with a minimum length of 4 [UserAgentFilter(\"User Agent\")] // Exact match of 'User Agent', case sensitive [UserAgentFilter(\"firefox|edg|chrome\")] // Allow user agents containing firefox or edg or chrome, case insensitive"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.BaseApiController.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.BaseApiController.html",
    "title": "BaseApiController",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.App.dll Inherit BaseApiController to get an automatic documentation of all your api endpoints All controllers inheriting BaseApiController are automatically picked up if matching the request path BaseApiController public class BaseApiController : ControllerBase Inheritance object ControllerBase BaseApiController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty Examples Arguments X Methods Inherit BaseApiController to get a automatic documentation of all your api endpoints [HttpGet] public ActionResult Docs() X X Type Description ActionResult Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Cache.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Cache.html",
    "title": "Cache",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.Cache.dll Caching for applications Default duration is 3 minutes Try using auto-generating cache keys, which differentiate caching down to user roles. - Cache things per user, by userId/email? Create your own cacheKey 'Ignore' means the function will always be invoked directly, bypassing the cache entirely. Skip options: - skipWhenAuthenticated, false by default - skipWhenAdmin, true by default The user must belong to one of the following case-sensitive roles: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators. - skipWhen, your own condition, must return True to skip Remarks X Cache is configured to a max capacity of 320.000 items, divided by 8 cache containers, where any item added takes up 1 size Each container is configured to a max capacity of 40.000 items, once reached 33% of the oldest are removed, ready to be GC'ed A null value is never added to cache Overwrite default cache configurations in appsettings.json: - duration: 180, minimum 1 - fallbackDuration: 300, set to 0 or negative to disable fallback cache globally - containerSizeLimit: 60000, minimum 10 Auto-generating cache key adds namespace, class, method, method-scoped variables of types such as bool, string, int, datetime, enum and few others - If a method-scoped variable is a class, its public members of same types are also appended as cacheKey - IsAuthenticated is always appended to cacheKey - Claim 'role', 'Role' and RoleClaimType if found, is always appended to cacheKey - Always adds built-in prefix Cache public static class Cache Inheritance object Cache Examples X Use cache: using SystemLibrary.Common.Framework.App; var cacheKey = \"key\"; var item = Cache.Get(cacheKey); // null if not in cache Arguments X Methods Clear all entries found, which was set through this Cache class Remarks X Only entries set through either TryGet, Get or Set will be cleared - other cache mechanisms that you are using are not touched Clearing cache is not thread safe as it null's out the cache containers and recreates them all - null checks exists before the cache containers are used, but it does not gurantee thread safety public static void Clear() X Cache.Clear(); X Get item from Cache as T using auto-generated cache key Remarks X A null value is never added to cache Throws exception if getItem can throw Default duration is 200 seconds 'Ignore' means the function will always be invoked directly, bypassing the cache entirely. Skip options: - skipWhenAuthenticated, false by default - skipWhenAdmin, true by default The user must belong to one of the following case-sensitive roles: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators. - skipWhen, your own condition, must return True to skip public static T Get<T>(Func<T> getItem, string cacheKey = \"\", CacheDuration duration = CacheDuration.Unset, Func<T, bool> condition = null, bool skipWhenAuthenticated = false, bool skipWhenAdmin = true, Func<bool> skipWhen = null) X Simplest example: var data = Cache.Get(() => { return \"hello world\"; }); //'data' is now 'hello world', if called multiple times within the default cache duration of 180 seconds, \"hello world\" is returned from the cache for all non-admin users Simplest example with cacheKey: var cacheKey = \"hello-world-key\"; var data = Cache.Get(() => { return \"hello world\"; }, cacheKey: cacheKey); //'data' is now 'hello world', if called multiple times within the default cache duration of 180 seconds, \"hello world\" is returned from the cache for all non-admin users Example with multiple options passed, and a condition that always fails: var cacheKey = \"hello-world-key\"; var data = Cache.Get(() => { return \"hello world\"; }, cacheKey: cacheKey, duration: TimeSpan.FromSeconds(1), condition: x => x != \"hello world\", skipWhenAuthenticated: false); //'data' is equal to 'hello world', cache duration is 1 second, but it only adds the result to cache, if it is not equal to \"hello world\" // so in this scenario - \"hello world\" is never added to cache, and our function that returns \"hello world\" is always invoked Example without a cache key class CarService { public string GetCars() { return Cache.Get<string>(() => { return Client.Get<string>(\"https://systemlibrary.com/api/cars?top=1\"); }, skipWhenAdmin: false); } } // This caches top 1 cars for every user, even admins, as we set 'skipWhenAdmin' to False Example without a cache key and with 'external' variables class CarService { public string GetCars(int top = 10) { var url = \"https://systemlibrary.com/api/cars\"; var urlQueryValue = \"?filter=none\"; return Cache.Get<string>(() => { return Client.Get<string>(url + urlQueryValue + \" top=\" + top); }); } } // Returns top 10 cars from the API, and adds result to cache (assumes not null) for a duration of 180 seconds by default // For simplicity, pretend an auto cache key looks like this: SLF%... // Note: cache key is created with the outside variable \"top\", it is \".ToString'd\", works on many types: bool, datetime, string, and simple POCO's with 1 depth level of properties/fields, not \"class inside class\" is not supported // Note: cache key for wether or not user is logged in is always appended so it always varies on \"IsAuthenticated\" X Generic types Name Description T Methods arguments Type Name Description Func<T> getItem string cacheKey \"\" to use auto-generating of cacheKey, null to always skip cache CacheDuration duration Func<T, bool> condition Add to cache only if condition is true, for instance: data?.Count > 0 bool skipWhenAuthenticated Skip cache for any user that is authenticated through the current HttpContext.User instance bool skipWhenAdmin Skip cache for any user that is authenticated through the current HttpContext.User and is in any role: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators Func<bool> skipWhen Implement your own logic for when to skip cache, let it return true on your conditions to avoid caching X Type Description T Returns item from cache or getItem Get item from Cache as T using auto-generated cache key Remarks X A null value is never added to cache Throws exception if getItem can throw Default duration is 200 seconds 'Ignore' means the function will always be invoked directly, bypassing the cache entirely. Skip options: - skipWhenAuthenticated, false by default - skipWhenAdmin, true by default The user must belong to one of the following case-sensitive roles: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators. - skipWhen, your own condition, must return True to skip public static T Get<T>(Func<T> getItem, CacheDuration duration, Func<T, bool> condition = null, bool skipWhenAuthenticated = false, bool skipWhenAdmin = true, Func<bool> skipWhen = null) X Generic types Name Description T Methods arguments Type Name Description Func<T> getItem CacheDuration duration Func<T, bool> condition Add to cache only if condition is true, for instance: data?.Count > 0 bool skipWhenAuthenticated Skip cache for any user that is authenticated through the current HttpContext.User instance bool skipWhenAdmin Skip cache for any user that is authenticated through the current HttpContext.User and is in any role: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators Func<bool> skipWhen Implement your own logic for when to skip cache, let it return true on your conditions to avoid caching X Type Description T Returns T from cache or from getItem, or throws if getItem throws Get item from Cache as T Remarks X CacheKey null or blank returns default without checking cache This never checks fallback cache public static T Get<T>(string cacheKey) X var cacheKey = \"helloworld\"; var data = Cache.Get<string>(cacheKey); X Generic types Name Description T Methods arguments Type Name Description string cacheKey X Type Description T Return item from cache if exists or default Get item from Cache as T Remarks X A null value is never added to cache Throws exception if getItem can throw Default duration is 200 seconds 'Ignore' means the function will always be invoked directly, bypassing the cache entirely. Skip options: - skipWhenAuthenticated, false by default - skipWhenAdmin, true by default The user must belong to one of the following case-sensitive roles: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators. - skipWhen, your own condition, must return True to skip public static T Get<T>(string cacheKey, Func<T> getItem, CacheDuration duration = CacheDuration.Unset, Func<T, bool> condition = null, bool skipWhenAuthenticated = false, bool skipWhenAdmin = true, Func<bool> skipWhen = null) X Generic types Name Description T Methods arguments Type Name Description string cacheKey \"\" to use auto-generating of cacheKey, null to always skip cache Func<T> getItem CacheDuration duration Func<T, bool> condition Add to cache only if condition is true, for instance: data?.Count > 0 bool skipWhenAuthenticated Skip cache for any user that is authenticated through the current HttpContext.User instance bool skipWhenAdmin Skip cache for any user that is authenticated through the current HttpContext.User and is in any role: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators Func<bool> skipWhen Implement your own logic for when to skip cache, let it return true on your conditions to avoid caching X Type Description T Returns T from cache or from getItem, or throws if getItem throws Ensures that the enclosed code block executes only once within the specified duration Default break duration is 60 seconds Remarks X Uses the stack frame to read current namespace and method as cache key, so max 1 invocation per function scope, else you must fill out the breakKey parameter too - in the future it might support multiple... Multiple threads running at same time, will trigger this multiple times as we do not really 'lock' public static bool Lock(CacheDuration duration = CacheDuration.Unset, string lockKey = null) X if(Cache.Lock(TimeSpan.FromSeconds(60), \"send-email\") { new Email(...).Send(); // Pseudo code // Example: invoking this code 66 times, one time per second, where first invocation is one second from \"now\", will send two emails: one at second 1, and another at second 61 } X Methods arguments Type Name Description CacheDuration duration The time span for which subsequent executions are prevented. string lockKey X Type Description bool True if the block is allowed to execute; otherwise, false. Remove item from Cache Remarks X Does nothing if item do not exist in cache or if cacheKey is null/blank public static void Remove(string cacheKey) X var cacheKey = \"hello world\"; Cache.Remove(cacheKey); X Methods arguments Type Name Description string cacheKey Add item to cache Remarks X A null value is never added to cache public static void Set<T>(string cacheKey, T item, CacheDuration duration = CacheDuration.Unset) X Generic types Name Description T Methods arguments Type Name Description string cacheKey CacheKey to set item as, if null or empty this does nothing T item CacheDuration duration Defaults to 180 seconds Try get item from Cache as T using auto-generated cache key Logs exception if getItem() throws Remarks X A null value is never added to cache Default duration is 200 seconds 'Ignore' means the function will always be invoked directly, bypassing the cache entirely. Skip options: - skipWhenAuthenticated, false by default - skipWhenAdmin, true by default The user must belong to one of the following case-sensitive roles: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators. - skipWhen, your own condition, must return True to skip public static T TryGet<T>(Func<T> getItem, string cacheKey = \"\", CacheDuration duration = CacheDuration.Unset, Func<T, bool> condition = null, bool skipWhenAuthenticated = false, bool skipWhenAdmin = true, Func<bool> skipWhen = null) X var data = Cache.TryGet<string>(() => throw new Exception(\"does not crash application\")); // Exception is logged through your ILogWriter implementation X Generic types Name Description T Methods arguments Type Name Description Func<T> getItem string cacheKey \"\" to use auto-generating of cacheKey, null to always skip cache CacheDuration duration Func<T, bool> condition Add to cache only if condition is true, for instance: data?.Count > 0 bool skipWhenAuthenticated Skip cache for any user that is authenticated through the current HttpContext.User instance bool skipWhenAdmin Skip cache for any user that is authenticated through the current HttpContext.User and is in any role: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators Func<bool> skipWhen Implement your own logic for when to skip cache, let it return true on your conditions to avoid caching X Type Description T Returns T from cache or from getItem. If getItem throws, the exception is logged as error and default is returned Try get item from Cache as T using auto-generated cache key Logs exception if getItem() throws Remarks X A null value is never added to cache Default duration is 200 seconds 'Ignore' means the function will always be invoked directly, bypassing the cache entirely. Skip options: - skipWhenAuthenticated, false by default - skipWhenAdmin, true by default The user must belong to one of the following case-sensitive roles: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators. - skipWhen, your own condition, must return True to skip public static T TryGet<T>(Func<T> getItem, CacheDuration duration, Func<T, bool> condition = null, bool skipWhenAuthenticated = false, bool skipWhenAdmin = true, Func<bool> skipWhen = null) X var data = Cache.TryGet<string>(() => throw new Exception(\"does not crash application\")); // Exception is logged through your ILogWriter implementation X Generic types Name Description T Methods arguments Type Name Description Func<T> getItem CacheDuration duration Func<T, bool> condition Add to cache only if condition is true, for instance: data?.Count > 0 bool skipWhenAuthenticated Skip cache for any user that is authenticated through the current HttpContext.User instance bool skipWhenAdmin Skip cache for any user that is authenticated through the current HttpContext.User and is in any role: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators Func<bool> skipWhen Implement your own logic for when to skip cache, let it return true on your conditions to avoid caching X Type Description T Returns T from cache or from getItem. If getItem throws, the exception is logged as error and default is returned Try get item from Cache as T If getItem throws, the exception is logged as 'Error' Remarks X A null value is never added to cache Default duration is 200 seconds 'Ignore' means the function will always be invoked directly, bypassing the cache entirely. Skip options: - skipWhenAuthenticated, false by default - skipWhenAdmin, true by default The user must belong to one of the following case-sensitive roles: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators. - skipWhen, your own condition, must return True to skip public static T TryGet<T>(string cacheKey, Func<T> getItem, CacheDuration duration = CacheDuration.Unset, Func<T, bool> condition = null, bool skipWhenAuthenticated = false, bool skipWhenAdmin = true, Func<bool> skipWhen = null) X var cacheKey = \"key\"; var data = Cache.TryGet<string>(cacheKey, () => throw new Exception(\"does not crash application\")); // Exception is logged through your ILogWriter implementation X Generic types Name Description T Methods arguments Type Name Description string cacheKey \"\" to use auto-generating of cacheKey, null to always skip cache Func<T> getItem CacheDuration duration Func<T, bool> condition Add to cache only if condition is true, for instance: data?.Count > 0 bool skipWhenAuthenticated Skip cache for any user that is authenticated through the current HttpContext.User instance bool skipWhenAdmin Skip cache for any user that is authenticated through the current HttpContext.User and is in any role: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators Func<bool> skipWhen Implement your own logic for when to skip cache, let it return true on your conditions to avoid caching X Type Description T Returns T from cache or from getItem. If getItem throws, the exception is logged as error and default is returned let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.CacheDuration.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.CacheDuration.html",
    "title": "CacheDuration",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.Cache.dll CacheDuration public enum CacheDuration Examples Arguments X Fields Name Summary L 2 hours for data weekly changing data or large and expensive data M 20 minutes for moderate-refresh data S 3 minutes for frequent refreshes Unset An 'unset' cache duration or 0, will use the default cache duration configured in appSettings, and if unset it defaults to S XL 1 day for data that changes, theres no harm in just showing it the next day XS 20 seconds for real-time, low-latency needs XXL 2 weeks for static data Extension Methods EnumExtensions.GetEnumText(Enum) EnumExtensions.GetEnumValue(Enum) EnumExtensions.IsAny(Enum, params Enum[]) EnumExtensions.ToText(Enum) EnumExtensions.ToValue(Enum) ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i].endsWith(']') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if(isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if(argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if(dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if(typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if(propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('public ', '').replace('override ', '').replace('protected ', ''); if(isClickable === true) { let txt = items[i].innerHTML; if(txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if(parent) { if(parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if(items != null && items.length > 0) { if(items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if(viewSources != null && viewSources.length > 0) { if(viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if(par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if(sidetocs) { let wrapper = sidetocs[0]; if(wrapper) { wrapper.addEventListener('click', function () { if(wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if(activeElements) { for(var i = 0; i < activeElements.length; i++){ let activeEle = activeElements[i]; if(activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (menuData.children === null || typeof (menuData.children) === 'undefined' || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); var container = this.parentNode while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if(!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if(next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if(docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideEnumTableSummariesInheritedFromClass() { const enumSummary = document.querySelector('div.markdown.level0.summary.h1-class-summary'); if (!enumSummary || !enumSummary.innerHTML) return; const enumSummaryHtml = enumSummary.innerHTML.trim(); document.querySelectorAll('.custom-class-content-inline').forEach(div => { const table = div.querySelector('table.table-condensed'); if (!table) return; table.querySelectorAll('tbody tr').forEach(tr => { const tds = tr.querySelectorAll('td'); if (!tds.length || tds.length <= 1) return; const lastTd = tds[tds.length - 1]; if (lastTd.innerHTML.trim() === enumSummaryHtml) { lastTd.innerHTML = ''; } }); }); } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(updateClassNames, 10); setTimeout(hideEnumTableSummariesInheritedFromClass, 10); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 15); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 20); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 25); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 66); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 45); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 50); setTimeout(() => hideAllEmptyMarkdowns(), 30); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 35); setTimeout(addEventsToTabCloseButtons, 40); //setTimeout(removeEmptyPopups, 50); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.CalleeCancelledRequestException.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.CalleeCancelledRequestException.html",
    "title": "CalleeCancelledRequestException",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.Client.dll The Callee Cancelled Request Exception is thrown when the callee (you) cancel's the request. To cancel a request you must pass a 'Cancellation Token', and then cancel the request through the Cancellation Token CalleeCancelledRequestException public class CalleeCancelledRequestException : Exception Inheritance object Exception CalleeCancelledRequestException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Examples Arguments X Constructors The Callee Cancelled Request Exception is thrown when the callee (you) cancel's the request. To cancel a request you must pass a 'Cancellation Token', and then cancel the request through the Cancellation Token public CalleeCancelledRequestException(string message = null, Exception inner = null) X Methods arguments Type Name Description string message Exception inner Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Client.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Client.html",
    "title": "Client",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.Client.dll Client is a class for all http(s) requests in your project Uses HttpClient and Polly behind the scenes for features such as reusing tcp connections, retry on 502 and 504 status codes, and optionally a request breaker for 7 seconds, if 25 error codes (404, 429, 500, 502, 503, 504, 505) occurs in a row useRetryPolicy: false, will retry once if request is a file request or GET or POST and status code is 502 or 504 Options: useRetryPolicy: True: same as 'false', but adds: - retries one additional time on 502, 504 GET, POST - retries up to two times if response is null (timeout/no response) - retries once on 401 GET, POST - retries once on 404 GET - retries once on 500 GET, POST - retries once on 404, 500, 502 504 file request - retries once on OPTION, PATCH, HEAD, CONNECT, TRACE Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! Client public class Client Inheritance object Client Examples X You can simply \"var client = new Client()\" if you want and use the methods directly or inherit it and base all your integrations on it, sharing headers or other methods you would like. A simple class and HttpBinClient: class HttpBinResponse { public string Url { get; set; } } class HttpBinClient : Client { const string apiUrl = \"http://httpbin.org\"; public HttpBinClient() : base(useRetryPolicy: true) { } public HttpBinResponse Get() { return base.Get<HttpBinResponse>(apiUrl + \"/get\").Data; } } Running the above Client and Response in a UnitTest project as such: [TestMethod] public void Test() { var client = new HttpBinClient(); var response = client.Get(); Assert.IsTrue(response.Url.Contains(\"http\")); //Visit: http://httpbin.org/get to see the actual value of 'url', then you know this Assert statement is true } Another example of using the Client directly: public void Test() { var client = new Client(); var response = client.Get<string>(\"http://httpbin.org/get\"); Assert.IsTrue(response.Contains(\"http\")); //Response is now the whole json (or any data actually as a string) text that the url: http://httpbin.org/get is returning } Another example returning HttpResponseMessage as is, for you to read the stream/content of the response yourself: public void Test() { var client = new Client(); var response = = client.Get<HttpResponseMessage>(\"http://httpbin.org/get\"); var httpResponseMessage = response.Data; // httpResponseMessage now is ready to be read if you need to read it manually, as in: it's not a json/xml/serialization type of response, but maybe an Stream/Image you need to read... } Arguments X Constructors Create a new client Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public Client(int? timeout = null, bool? useRetryPolicy = null, bool? ignoreSslErrors = null, int? retryTimeout = null, bool? useRequestBreakerPolicy = null, bool? throwOnUnsuccessful = null, bool? useAutomaticDecompression = null, bool? expectContinue = null) X Methods arguments Type Name Description int? timeout Override default from appSettings bool? useRetryPolicy Override default from appSettings bool? ignoreSslErrors Override default from appSettings int? retryTimeout Override default from appSettings bool? useRequestBreakerPolicy Override default from appSettings bool? throwOnUnsuccessful Override default from appSettings bool? useAutomaticDecompression Override default from appSettings bool? expectContinue Methods Send a HTTP DELETE async request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public Task<ClientResponse<T>> DeleteAsync<T>(string url, object data, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var deleteId = 1; var response = await new Client().DeleteAsync<string>(\"https://www.systemlibrary.com/delete\", deleteId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description Task<ClientResponse<T>> Send a HTTP DELETE request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public ClientResponse<T> Delete<T>(string url, object data, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var deleteId = 1; var response = new Client().Delete<string>(\"https://www.systemlibrary.com/delete\", deleteId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Send a HTTP GET request with a payload Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public Task<ClientResponse<T>> GetAsync<T>(string url, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, object payload = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var data = new { hello: \"world\"}; var response = new Client().Get<string>(\"https://www.systemlibrary.com/get\", data, ContentType.json, 2000); X Generic types Name Description T Methods arguments Type Name Description string url ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions object payload CancellationToken cancellationToken Func<string, T> deserialize X Type Description Task<ClientResponse<T>> Send a HTTP GET request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public Task<ClientResponse<T>> GetAsync<T>(string url, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var response = await new Client().GetAsync<string>(\"https://www.systemlibrary.com/get\", ContentType.json, 2000); X Generic types Name Description T Methods arguments Type Name Description string url ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description Task<ClientResponse<T>> Send a HTTP GET request with a payload Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public ClientResponse<T> Get<T>(string url, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, object payload = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var data = new { hello: \"world\"}; var response = new Client().Get<string>(\"https://www.systemlibrary.com/get\", data, ContentType.json, 2000); X Generic types Name Description T Methods arguments Type Name Description string url ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions object payload CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Send a HTTP HEAD async request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public Task<ClientResponse<T>> HeadAsync<T>(string url, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var response = await new Client().HeadAsync<string>(\"https://www.systemlibrary.com/head\", ContentType.json, 2000); X Generic types Name Description T Methods arguments Type Name Description string url IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description Task<ClientResponse<T>> Send a HTTP HEAD request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public ClientResponse<T> Head<T>(string url, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var response = new Client().Head<string>(\"https://www.systemlibrary.com/head\", ContentType.json, 2000); X Generic types Name Description T Methods arguments Type Name Description string url IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Send a HTTP OPTIONS request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public Task<ClientResponse<T>> OptionsAsync<T>(string url, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var response = await new Client().OptionsAsyncT<string>(\"https://www.systemlibrary.com/options\"); X Generic types Name Description T Methods arguments Type Name Description string url IDictionary<string, string> headers int timeoutMilliseconds CancellationToken cancellationToken Func<string, T> deserialize X Type Description Task<ClientResponse<T>> Send a HTTP OPTIONS request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public ClientResponse<T> Options<T>(string url, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var response = new Client().Options<string>(\"https://www.systemlibrary.com/options\"); X Generic types Name Description T Methods arguments Type Name Description string url IDictionary<string, string> headers int timeoutMilliseconds CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Send a HTTP POST async request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public Task<ClientResponse<T>> PostAsync<T>(string url, object data, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var postId = 1; var response = await new Client().PostAsync<string>(\"https://www.systemlibrary.com/post\", postId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description Task<ClientResponse<T>> Send a HTTP POST request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public ClientResponse<T> Post<T>(string url, object data = null, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var postId = 1; var response = new Client().Post<string>(\"https://www.systemlibrary.com/post\", postId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Send a HTTP PUT async request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public Task<ClientResponse<T>> PutAsync<T>(string url, object data, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var putId = 1; var response = await new Client().PutAsync<string>(\"https://www.systemlibrary.com/put\", putId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description Task<ClientResponse<T>> Send a HTTP PUT request Remarks X Every client uses the Default configurations, which you can override in appsettings.json Most default configurations can again be overriden in the Clients constructor Each HttpClient pool behind the scenes, is based on scheme, url, port and timeout Each method also take an additional timeout parameter, a different timeout will target a different HttpClient Each underlying HttpClient is used for default 20 minutes, each TCP connection is maximum reused for 4 minutes and 55 seconds A 502 or 504 response on GET, POST or file request will always be retried once, cannot be turned off unless RetryTimeout is set to 0 in appSettings A new client wont neccesary create a new HttpClient, it might use from cache, it all depends on the url and params you pass in - In theory you could create just one client reusing towards any url you want - But it's now up to you now: You want a new instance? Injection? Create your own static wrapper? Sure! public ClientResponse<T> Put<T>(string url, object data, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeoutMilliseconds = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var putId = 1; var response = new Client().Put<string>(\"https://www.systemlibrary.com/put\", putId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeoutMilliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.ClientResponse-1.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.ClientResponse-1.html",
    "title": "ClientResponse<T>",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.Client.dll The response that all Client methods returns Note that a response statuscode might be 200 OK, but the IsSuccess might be false in scenarios where no response were returned ClientResponse<T> public class ClientResponse<T> : ClientResponse, IDisposable Inheritance object ClientResponse ClientResponse<T> Implements IDisposable Inherited Members ClientResponse.Response ClientResponse.IsSuccess Type Parameters Name Description T T can be a string that you later can convert to json, or it can be a class, or a list of a class that will automatically be converted from json, assuming json response Examples Arguments X Generic types Name Description T T can be a string that you later can convert to json, or it can be a class, or a list of a class that will automatically be converted from json, assuming json response Constructors Pass in a custom status code of your own choice public ClientResponse(HttpStatusCode statusCode) X Methods arguments Type Name Description HttpStatusCode statusCode Optional: pass in a default data with response status code of 500 Useful if you want to give some custom messages/data upwards to the callee public ClientResponse(T defaultData = default) X Methods arguments Type Name Description T defaultData Pass in a default data with response status code Useful if you want to give some custom messages/data and custom status code upwards to the callee public ClientResponse(T defaultData, HttpStatusCode statusCode) X Methods arguments Type Name Description T defaultData HttpStatusCode statusCode Properties The response that all Client methods returns Note that a response statuscode might be 200 OK, but the IsSuccess might be false in scenarios where no response were returned public T Data { get; } X Property Value Type Description T The response that all Client methods returns Note that a response statuscode might be 200 OK, but the IsSuccess might be false in scenarios where no response were returned public string Message { get; } X Property Value Type Description string The response that all Client methods returns Note that a response statuscode might be 200 OK, but the IsSuccess might be false in scenarios where no response were returned public HttpStatusCode StatusCode { get; } X Property Value Type Description HttpStatusCode Methods Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() X Implements IDisposable Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.ClientResponse.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.ClientResponse.html",
    "title": "ClientResponse",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.Client.dll Base class of a ClientResponse - Contains the HttpResponseMessage itself Used when you do not want to return 'object' nor generic type, but you want to be clear in what object is returned in your C# functions - Contains 'data' variable for serializing purposes, so 'data' variable is never undefined in JS world (depends on the JSON serialization options youve set, but out of the box its null if not set) ClientResponse public class ClientResponse Inheritance object ClientResponse ClientResponse<T> Examples Arguments X Properties Base class of a ClientResponse - Contains the HttpResponseMessage itself Used when you do not want to return 'object' nor generic type, but you want to be clear in what object is returned in your C# functions - Contains 'data' variable for serializing purposes, so 'data' variable is never undefined in JS world (depends on the JSON serialization options youve set, but out of the box its null if not set) Remarks X Note: This variable is null or the 'data' variable from the generic ClientResponse This variable is defined here too, to avoid undefined scenarios in JS world And this class is then used as base class for all responses so you can always cast anything to this class and then do a serialize that just gives the data without all other statuscode, httpmessage etc. public object Data { get; } X Property Value Type Description object Base class of a ClientResponse - Contains the HttpResponseMessage itself Used when you do not want to return 'object' nor generic type, but you want to be clear in what object is returned in your C# functions - Contains 'data' variable for serializing purposes, so 'data' variable is never undefined in JS world (depends on the JSON serialization options youve set, but out of the box its null if not set) public bool IsSuccess { get; } X Property Value Type Description bool Base class of a ClientResponse - Contains the HttpResponseMessage itself Used when you do not want to return 'object' nor generic type, but you want to be clear in what object is returned in your C# functions - Contains 'data' variable for serializing purposes, so 'data' variable is never undefined in JS world (depends on the JSON serialization options youve set, but out of the box its null if not set) [JsonIgnore] public HttpResponseMessage Response { get; } X Property Value Type Description HttpResponseMessage Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.ContentType.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.ContentType.html",
    "title": "ContentType",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.Client.dll An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent ContentType public enum ContentType Examples X var client = new Client(); var response = client.Post<string>(\"https://systemlibrary.com/post\", data, ContentType.text); Arguments X Fields Name Summary Auto Auto-detect the content type by reading headers or the body None Do not set the content type header, it will be 'none', unspecified basically bmp An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent css An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent docx An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent gif An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent graphql An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent html An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent javascript An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent jpeg An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent json Sends data as application/json, if 'data' passed to the client through put/post/get already is a string, no conversion is made, else it is being converted to json string before data is sent jsonPatch An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent multipartFormData An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent octetStream An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent pdf An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent png An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent svg An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent text Sends data as text/plain, if 'data' passed to the client through put/post/get already is a string, no conversion is made, else it is being converted to json string before data is sent tiff An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent webp An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent xml An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent xwwwformUrlEncoded Sends data as application/x-www-form-urlencoded zip An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent Extension Methods EnumExtensions.GetEnumText(Enum) EnumExtensions.GetEnumValue(Enum) EnumExtensions.IsAny(Enum, params Enum[]) EnumExtensions.ToText(Enum) EnumExtensions.ToValue(Enum) ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i].endsWith(']') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if(isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if(argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if(dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if(typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if(propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('public ', '').replace('override ', '').replace('protected ', ''); if(isClickable === true) { let txt = items[i].innerHTML; if(txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if(parent) { if(parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if(items != null && items.length > 0) { if(items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if(viewSources != null && viewSources.length > 0) { if(viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if(par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if(sidetocs) { let wrapper = sidetocs[0]; if(wrapper) { wrapper.addEventListener('click', function () { if(wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if(activeElements) { for(var i = 0; i < activeElements.length; i++){ let activeEle = activeElements[i]; if(activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (menuData.children === null || typeof (menuData.children) === 'undefined' || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); var container = this.parentNode while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if(!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if(next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if(docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideEnumTableSummariesInheritedFromClass() { const enumSummary = document.querySelector('div.markdown.level0.summary.h1-class-summary'); if (!enumSummary || !enumSummary.innerHTML) return; const enumSummaryHtml = enumSummary.innerHTML.trim(); document.querySelectorAll('.custom-class-content-inline').forEach(div => { const table = div.querySelector('table.table-condensed'); if (!table) return; table.querySelectorAll('tbody tr').forEach(tr => { const tds = tr.querySelectorAll('td'); if (!tds.length || tds.length <= 1) return; const lastTd = tds[tds.length - 1]; if (lastTd.innerHTML.trim() === enumSummaryHtml) { lastTd.innerHTML = ''; } }); }); } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(updateClassNames, 10); setTimeout(hideEnumTableSummariesInheritedFromClass, 10); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 15); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 20); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 25); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 66); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 45); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 50); setTimeout(() => hideAllEmptyMarkdowns(), 30); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 35); setTimeout(addEventsToTabCloseButtons, 40); //setTimeout(removeEmptyPopups, 50); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.HttpRequestExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.HttpRequestExtensions.html",
    "title": "HttpRequestExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.App.Extensions SystemLibrary.Common.Framework.App.dll HttpRequest extensions HttpRequestExtensions public static class HttpRequestExtensions Inheritance object HttpRequestExtensions Examples Arguments X Methods Returns the Accept as string or null if not found public static string Accept(this HttpRequest request) X var accept = request.Accept(); // accept is now the accept header value from the request, or null if not existing X Methods arguments Type Name Description HttpRequest request X Type Description string Returns the Content-Type as string or null if not found public static string ContentType(this HttpRequest request) X var contentType = request.ContentType(); // contentType is now the 'Content-Type' header value from the request, or null if not existing X Methods arguments Type Name Description HttpRequest request X Type Description string Returns true if the request is an ajax request represented by the header 'X-Requested-With' public static bool IsAjaxRequest(this HttpRequest request) X var isAjax = request.IsAjaxRequest(); // true if header X-Requested-With was set to \"XMLHttpRequest\", else false X Methods arguments Type Name Description HttpRequest request X Type Description bool HttpRequest extensions public static bool IsFileRequest(this HttpRequest request) X Methods arguments Type Name Description HttpRequest request X Type Description bool Returns the referer as Uri or null if not found public static Uri Referer(this HttpRequest request) X var referer = request.Referer(); // referer is now the referer from the Header request, or null if not existing X Methods arguments Type Name Description HttpRequest request X Type Description Uri Get the full url of the request, includes protocol, schema, path and query string public static string Url(this HttpRequest request) X var url = request.Url(); // for example, url is now: https://www.systemlibrary.com/hello?world=1 X Methods arguments Type Name Description HttpRequest request X Type Description string Full url of the request, or null if request is null Returns the User-Agent as string or null if not found public static string UserAgent(this HttpRequest request) X var userAgent = request.UserAgent(); // userAgent is now the 'User-Agent' header value from the request, or null if not existing X Methods arguments Type Name Description HttpRequest request X Type Description string let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.IApplicationBuilderExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.IApplicationBuilderExtensions.html",
    "title": "IApplicationBuilderExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.App.Extensions SystemLibrary.Common.Framework.App.dll Extension methods for ApplicationBuilder object IApplicationBuilderExtensions public static class IApplicationBuilderExtensions Inheritance object IApplicationBuilderExtensions Examples Arguments X Methods Register common middlewares for a web application This will register: - Http to Https redirection middleware, client and server side - Routing urls to controllers middleware - /api/ urls to controllers middleware - Authentication and Authorization attributes' middleware - Servince static files such as .css, .js, .jpg, etc... middleware - Forwarded headers middleware - Razor pages and Mvc middleware - Secure cookie policy middleware - Secure cookie policy (http only middleware - Recompiling razor pages (saving a cshtml file) middleware - Exception page middleware Remarks X This should be your first registration of middlewares you have, exception might be your own middleware for logging/tracing requests public static IApplicationBuilder UseFrameworkMiddlewares(this IApplicationBuilder app, IWebHostEnvironment env, FrameworkOptions options = null) X Startup.cs/Program.cs: public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { var options = new FrameworkOptions(); app.UseFrameworkApp(options); } X Methods arguments Type Name Description IApplicationBuilder app IWebHostEnvironment env FrameworkOptions options X Type Description IApplicationBuilder let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.IServiceCollectionExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.IServiceCollectionExtensions.html",
    "title": "IServiceCollectionExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.App.Extensions SystemLibrary.Common.Framework.App.dll Extension methods for IServiceCollection IServiceCollectionExtensions public static class IServiceCollectionExtensions Inheritance object IServiceCollectionExtensions Examples Arguments X Methods Extension methods for IServiceCollection public static IServiceCollection AddFrameworkServices(this IServiceCollection serviceCollection, FrameworkOptions options = null) X Methods arguments Type Name Description IServiceCollection serviceCollection FrameworkOptions options X Type Description IServiceCollection Configures ServiceCollection in one-line, so register all of your own or other service configurations after this one Registers: - MVC services - Razor Page services - Routing services - ForwardedProtocol and ForwardedIp (XForwardedFor) headers - Compression for Gzip and Brotli services - Authentication and authorization services - Output cache services - Registers the main assembly and all its controllers (if any), as in: your Web Application Project's assembly Optionally, through the argument FrameworkOptions: - Can register view locations - Can register area view locations - Can register one ViewLocationExpander - and more... public static IServiceCollection AddFrameworkServices<TLogWriter>(this IServiceCollection serviceCollection, FrameworkOptions options = null) where TLogWriter : class, ILogWriter X Startup.cs/Program.cs: public void ConfigureServices(IServiceCollection services) { var options = new FrameworkOptions(); options.ViewLocations = new string[] { \"~/Views/{0}/index.cshtml\" } options.AreaViewLocations = new string[] { \"~/Area/{2}/{1}/{0}.cshtml\" } options.ViewLocationExpander = null; //or create one based on the Interface 'IViewLocationExpander' options.UseDataProtectionPolicy = true; // Register and enabled the data protection policy in this framework services.AddFrameworkServices<TLogWriter>(options); } X Generic types Name Description TLogWriter Methods arguments Type Name Description IServiceCollection serviceCollection FrameworkOptions options X Type Description IServiceCollection Extension methods for IServiceCollection public static IServiceCollection UseDataProtectionPolicy(this IServiceCollection services, FrameworkOptions options) X Methods arguments Type Name Description IServiceCollection services FrameworkOptions options X Type Description IServiceCollection let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.StringExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.StringExtensions.html",
    "title": "StringExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.App.Extensions SystemLibrary.Common.Framework.Client.dll StringExtensions public static class StringExtensions Inheritance object StringExtensions Examples Arguments X Methods Send a HTTP DELETE request public static ClientResponse<T> Delete<T>(this string url, object data, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeout = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var deleteId = 1; var response = new Client().Delete<string>(\"https://www.systemlibrary.com/delete\", deleteId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeout milliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Send a HTTP GET request with a payload public static ClientResponse<T> Get<T>(this string url, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeout = 40001, JsonSerializerOptions jsonSerializerOptions = null, object payload = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var data = new { hello: \"world\"}; var response = new Client().Get<string>(\"https://www.systemlibrary.com/get\", data, ContentType.json, 2000); X Generic types Name Description T Methods arguments Type Name Description string url ContentType contentType IDictionary<string, string> headers int timeout milliseconds JsonSerializerOptions jsonSerializerOptions object payload CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Send a HTTP POST request public static ClientResponse<T> Post<T>(this string url, object data = null, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeout = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var postId = 1; var response = new Client().Post<string>(\"https://www.systemlibrary.com/post\", postId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeout milliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> Send a HTTP PUT request public static ClientResponse<T> Put<T>(this string url, object data, ContentType contentType = ContentType.Auto, IDictionary<string, string> headers = null, int timeout = 40001, JsonSerializerOptions jsonSerializerOptions = null, CancellationToken cancellationToken = default, Func<string, T> deserialize = null) X var putId = 1; var response = new Client().Put<string>(\"https://www.systemlibrary.com/put\", putId, ContentType.textplain, 2000); X Generic types Name Description T Methods arguments Type Name Description string url object data ContentType contentType IDictionary<string, string> headers int timeout milliseconds JsonSerializerOptions jsonSerializerOptions CancellationToken cancellationToken Func<string, T> deserialize X Type Description ClientResponse<T> let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Extensions.html",
    "title": "SystemLibrary.Common.Framework.App.Extensions",
    "summary": "SystemLibrary.Common.Framework.App.Extensions Classes HttpRequestExtensions HttpRequest extensions IApplicationBuilderExtensions Extension methods for ApplicationBuilder object IServiceCollectionExtensions Extension methods for IServiceCollection StringExtensions"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.HtmlHelperFactory.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.HtmlHelperFactory.html",
    "title": "HtmlHelperFactory",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.App.dll HtmlHelperFactory builds a new instance of IHtmlBuilder outside of your View Context HtmlHelperFactory public class HtmlHelperFactory Inheritance object HtmlHelperFactory Examples Arguments X Methods Build a default IHtmlHelper public static IHtmlHelper Build() X Usage: var htmlHelper = HtmlHelperFactory.Build(); X X Type Description IHtmlHelper IHtmlHelper instance, never null Build a IHtmlHelper<T> where T is your ViewModel public static IHtmlHelper<T> Build<T>() where T : class X Usage: class ViewModel { public string Title { get; set; } } var htmlHelper = HtmlHelperFactory.Build<ViewModel>(); X Generic types Name Description T X Type Description IHtmlHelper<T> IHtmlHelper of T instance, never null Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.OutputCachePolicy.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.OutputCachePolicy.html",
    "title": "OutputCachePolicy",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.App.dll Add any OutputCachePolicy to the OutputCache attribute in the 'PolicyName' property Requires framework option UseControllers or UseMvc to be true OutputCachePolicy public static class OutputCachePolicy Inheritance object OutputCachePolicy Examples Arguments X Fields Cache into two categories, one for authenticated and one for unauthenticated users public const string CacheAuthenticated = \"slcf__CacheAuthenticatedPolicy\" X Field Value Type Description string Cache based on all roles the current user have, concatinated as a one cache key string public const string CacheRoles = \"slcf__CacheRolesPolicy\" X Field Value Type Description string Cache based on common claims that most often exists (sub, phone, email, id) on the user identity public const string CacheUser = \"slcf__CacheUserPolicy\" X Field Value Type Description string Use the standard 'OutputCache' with optional tags to skip caching for admins or authenticated users: skipWhenAuthenticated=true skipWhenAdmin=true NOTE: This 'Cache Policy' is a placeholder for documentation purposes and specifies additional tags supported by this framework for the sealed class 'OutputCacheAttribute' from Microsoft. Remarks X Requires framework option UseControllers or UseMvc to be true public const string OutputCacheTags = \"slcf__NoPolicyRegistered\" X Field Value Type Description string let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Services.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.Services.html",
    "title": "Services",
    "summary": "NamespaceSystemLibrary.Common.Framework.App SystemLibrary.Common.Framework.App.dll Services is a global way to reuse the configured service provider and collection Services public static class Services Inheritance object Services Examples Arguments X Methods Get service as T or default if not found public static T Get<T>() where T : class X Generic types Name Description T X Type Description T let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.App.html",
    "title": "SystemLibrary.Common.Framework.App",
    "summary": "SystemLibrary.Common.Framework.App Classes ActionContextInstance An implementation of the 'old' thread safe singleton ActionContext we all know and love from .NET Framework BaseApiController Inherit BaseApiController to get an automatic documentation of all your api endpoints All controllers inheriting BaseApiController are automatically picked up if matching the request path Cache Caching for applications Default duration is 3 minutes Try using auto-generating cache keys, which differentiate caching down to user roles. - Cache things per user, by userId/email? Create your own cacheKey 'Ignore' means the function will always be invoked directly, bypassing the cache entirely. Skip options: - skipWhenAuthenticated, false by default - skipWhenAdmin, true by default The user must belong to one of the following case-sensitive roles: Admin, Admins, Administrator, Administrators, WebAdmins, CmsAdmins, admin, admins, administrator, administrators. - skipWhen, your own condition, must return True to skip CalleeCancelledRequestException The Callee Cancelled Request Exception is thrown when the callee (you) cancel's the request. To cancel a request you must pass a 'Cancellation Token', and then cancel the request through the Cancellation Token Client Client is a class for all http(s) requests in your project Uses HttpClient and Polly behind the scenes for features such as reusing tcp connections, retry on 502 and 504 status codes, and optionally a request breaker for 7 seconds, if 25 error codes (404, 429, 500, 502, 503, 504, 505) occurs in a row useRetryPolicy: false, will retry once if request is a file request or GET or POST and status code is 502 or 504 Options: useRetryPolicy: True: same as 'false', but adds: - retries one additional time on 502, 504 GET, POST - retries up to two times if response is null (timeout/no response) - retries once on 401 GET, POST - retries once on 404 GET - retries once on 500 GET, POST - retries once on 404, 500, 502 504 file request - retries once on OPTION, PATCH, HEAD, CONNECT, TRACE ClientResponse Base class of a ClientResponse - Contains the HttpResponseMessage itself Used when you do not want to return 'object' nor generic type, but you want to be clear in what object is returned in your C# functions - Contains 'data' variable for serializing purposes, so 'data' variable is never undefined in JS world (depends on the JSON serialization options youve set, but out of the box its null if not set) ClientResponse<T> The response that all Client methods returns Note that a response statuscode might be 200 OK, but the IsSuccess might be false in scenarios where no response were returned HtmlHelperFactory HtmlHelperFactory builds a new instance of IHtmlBuilder outside of your View Context OutputCachePolicy Add any OutputCachePolicy to the OutputCache attribute in the 'PolicyName' property Requires framework option UseControllers or UseMvc to be true Services Services is a global way to reuse the configured service provider and collection Enums CacheDuration ContentType An enum of various media types that can be sent to the Client request methods The 'ContentType' is sent as an 'Accept' HEADER in the request NOTE: Not all of them have been implemented yet though, but all will be sent as 'ACCEPT' header if specified, if you specify ContentType.none, no accept header is sent"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Assemblies.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Assemblies.html",
    "title": "Assemblies",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Static functions on whitelisted loaded assemblies Remarks X Built on top of System.Reflection.Assembly Assemblies public static class Assemblies Inheritance object Assemblies Examples Arguments X Methods Find all types that inherit from or implement T and have an attribute, in all whitelisted loaded assemblies. Remarks X Skip searching in known assemblies with names starting with Microsoft, System, EntityFramework, AWS, Serilog, MSTest, NUnit, Newtonsoft, Xamarin, Dapper, Autofac, AutoMapper, Salesforce, and others. public static IEnumerable<Type> FindAllTypesInheritingWithAttribute<TClassType, TAttributeType>() where TClassType : class where TAttributeType : Attribute X public class NameAttribute : Attribute { } [NameAttribute] public class Car : IVehicle { } var vehicles = Assemblies.FindAllTypesInheriting<IVehicle,NameAttribute> // Returns Car and all other types that inherit from or implement IVehicle, which also have the attribute. X Generic types Name Description TClassType Class TAttributeType Attribute X Type Description IEnumerable<Type> IEnumerable of System.Type Find all types that inherit from or implement T in all whitelisted loaded assemblies. Remarks X Skip searching in known assemblies with names starting with Microsoft, System, EntityFramework, AWS, Serilog, MSTest, NUnit, Newtonsoft, Xamarin, Dapper, Autofac, AutoMapper, Salesforce, and others. public static IEnumerable<Type> FindAllTypesInheriting<TClassType>() where TClassType : class X public class Car : IVehicle { } var vehicles = Assemblies.FindAllTypesInheriting<IVehicle> // Returns Car and all other types that inherit from or implement IVehicle. X Generic types Name Description TClassType X Type Description IEnumerable<Type> IEnumerable of System.Type Read the content of an embedded resource as a string. Remarks X Searches only in a single assembly, defaulting to 'CallingAssembly'. public static string GetEmbeddedResource(string relativeName, Assembly assembly = null) X var text = Assemblies.GetEmbeddedResource(\"Folder/SubFolder/SubFolder2/json.text\"); Assert.IsTrue(text.Contains(\"hello world\")); // assume a file in Solution Explorer exists at \"~/Folder/SubFolder/SubFolder2/json.txt\" // assume \"json.txt\" has build action 'Embedded Resource' // assume \"json.txt\" contains 'hello world' this is now true X Methods arguments Type Name Description string relativeName Assembly assembly X Type Description string Read the content of an embedded resource as a byte[]. Remarks X Built on top of System.Reflection.Assembly public static byte[] GetEmbeddedResourceAsBytes(string relativeName, Assembly assembly = null) X var bytes = Assemblies.GetEmbeddedResourceAsBytes(\"Folder/SubFolder/SubFolder2/image.png\"); // The bytes array now contains the entire image.jpg file as a byte array, assuming image.jpg was marked with the build action 'Embedded Resource'. X Methods arguments Type Name Description string relativeName Assembly assembly X Type Description byte[] let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Async.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Async.html",
    "title": "Async",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Run methods asynchronously without blocking. Async public static class Async Inheritance object Async Examples Arguments X Methods Run all actions seperately in a non-blocking way Each action passed is ran in a try catch without notifying callee See the overloaded method to add a callback for logging exceptions Remarks X All functions passed to this is ran in an unordered and non-blocking way All functions passed will run till completion, erroring or till main thread is shut down public static void FireAndForget(params Action[] actions) X Async.FireAndForget(() => System.IO.File.AppenAllText(\"C:\\temp\\text.log\", \"hello world\")); X Methods arguments Type Name Description Action[] actions Array of methods to invoke in a non-blocking way Run all actions seperately in a non-blocking way Each action passed is ran in a try catch without notifying callee See the overloaded method if you want to ignore exceptions Remarks X All functions passed to this is ran in an unordered and non-blocking way All functions passed will run till completion, erroring or till main thread is shut down public static void FireAndForget(Action<Exception> onError, params Action[] actions) X Async.FireAndForget((ex) => Log.Error(ex), () => System.IO.File.AppenAllText(\"C:\\temp\\text.log\", \"hello world\")); X Methods arguments Type Name Description Action<Exception> onError Callback invoked if an exception occured Action[] actions Array of methods to invoke in a non-blocking way Execute methods in paralell manner where each result is appended to a List Halts execution till all functions passed have ran till completion Remarks X Parallel swallows exceptions if the methods passed does throw Parallel requires the methods pass to always return a data Null values returned from the methods will be filtered away Parallel usage is against local file system, file searches and CPU bound calculations public static List<T> Parallel<T>(params Func<T>[] functions) X Generic types Name Description T Methods arguments Type Name Description Func<T>[] functions X Type Description List<T> Execute methods in a async manner, appending the range of results per function to the same list, and it halts execution till all functions passed as params has completed public static List<T> Run<T>(params Func<IEnumerable<T>>[] functions) X class Car { public string Name { get; set; } } class CarApi { //Simple dummy method that pretends to return a list of cars based on the name from some API List<Car> GetByName(string name) { //Client exists in nuget package: SystemLibrary.Common.Framework.App return Client.Get<List<Car>>(\"https://systemlibrary.com/cars/q=?\" + name); } } var carApi = new CarApi(); var cars = Async.Run<Car>( () => carApi.GetByName(\"blue\"), () => carApi.GetByName(\"red\"), () => carApi.GetByName(\"orange\") ); // Variable 'cars' is filled after all three api requests has completed. // Assume we got 2 blue, 3 red and 4 orange // 'cars' now contain a total of 9 objects of type 'Car' X Generic types Name Description T Methods arguments Type Name Description Func<IEnumerable<T>>[] functions X Type Description List<T> Execute methods asynchronously, appending each result to a list, and halt execution until all functions passed as parameters have completed. A hardcoded 30-second limit for all methods to complete; if exceeded, some results may be omitted, an error is logged, but the data collected so far is returned. public static List<T> Tasks<T>(params Func<T>[] functions) X class Car { public string Name { get; set; } } class CarApi { //Simple dummy method that pretends to return a list of cars based on the name from some API List<Car> GetByName(string name) { //Client exists in nuget package: SystemLibrary.Common.Framework.App return Client.Get<List<Car>>(\"https://systemlibrary.com/cars/q=?\" + name); } } var carApi = new CarApi(); var cars = Async.Tasks<Car>( () => carApi.GetByName(\"blue\"), () => carApi.GetByName(\"red\"), () => carApi.GetByName(\"orange\") ); // Variable 'cars' is filled after all three api requests has completed. // Assume we got 1 blue, 0 red and 1 orange // 'cars' now contain a total of 2 objects of type 'Car' X Generic types Name Description T Methods arguments Type Name Description Func<T>[] functions X Type Description List<T> Execute methods in an async manner, appending each single result to a list, and it halts execution till all functions passed as params has completed Pass in a specific timeout limit in milliseconds, before the results will be returned 'as is' public static List<T> Tasks<T>(int timeoutMilliseconds, params Func<T>[] functions) X class Car { public string Name { get; set; } } class CarApi { //Simple dummy method that pretends to return a list of cars based on the name from some API List<Car> GetByName(string name) { //Client exists in nuget package: SystemLibrary.Common.Framework.App return Client.Get<List<Car>>(\"https://systemlibrary.com/cars/q=?\" + name); } } var carApi = new CarApi(); var cars = Async.Tasks<Car>(7500, () => carApi.GetByName(\"blue\"), () => carApi.GetByName(\"red\"), () => carApi.GetByName(\"orange\") ); // Variable 'cars' is filled after all three api requests has completed. // Assume we got 1 blue, 0 red and 1 orange // 'cars' now contain a total of 2 objects of type 'Car' X Generic types Name Description T Methods arguments Type Name Description int timeoutMilliseconds Func<T>[] functions X Type Description List<T> let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.ConfigDecryptAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.ConfigDecryptAttribute.html",
    "title": "ConfigDecryptAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework.Attributes SystemLibrary.Common.Framework.Net.dll Marks a property as the placeholder for a decrypted config value. The property must be public, instance-level, with both get and set accessors. Used internally by Config to locate and decrypt values marked with DecryptAttribute on instantiation. Values must be encrypted using the parameterless Encrypt() method. See StringExtensions.Encrypt() for details. Remarks X PropertyName must refer to another property in the same class. The class must inherit from Config. Applies only to properties with public get;set;. Safe for external use; no planned breaking changes. Decryption occurs once during application startup when the Configuration class is created. ConfigDecryptAttribute [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class ConfigDecryptAttribute : Attribute Inheritance object Attribute ConfigDecryptAttribute Examples X apiConfig.json: { token: \"An encrypted value of the token, store it safely in git as it is encrypted by a key/IV only you know!\" } ApiConfig.cs: class ApiConfig : Config { public string Token {get;set;} //Encrypted value... public string TokenDecrypt {get;set;} // Naming convention decrypting [ConfigDecrypt(propertyName=\"Token\")] public string TokenDec {get;set;} // Attribute convention decrypting } Arguments X Constructors Pass in the name of the property that will be decrypted Remarks X PropertyName must refer to another property in the same class. The class must inherit from Config. Applies only to properties with public get;set;. Safe for external use; no planned breaking changes. Decryption occurs once during application startup when the Configuration class is created. public ConfigDecryptAttribute(string propertyName = null) X Methods arguments Type Name Description string propertyName Fields Name of the property that will be decrypted Remarks X PropertyName must refer to another property in the same class. The class must inherit from Config. Applies only to properties with public get;set;. Safe for external use; no planned breaking changes. Decryption occurs once during application startup when the Configuration class is created. public string PropertyName X Field Value Type Description string Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.JsonCompressAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.JsonCompressAttribute.html",
    "title": "JsonCompressAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework.Attributes SystemLibrary.Common.Framework.Json.dll Compress and decompress a String, Long or Int property or field on serialization and deserialization Useful when you want to minify long texts before sending to Client or upon receiving Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types JsonCompressAttribute [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class JsonCompressAttribute : JsonConverterAttribute Inheritance object Attribute JsonAttribute JsonConverterAttribute JsonCompressAttribute Inherited Members JsonConverterAttribute.ConverterType Examples X Model.cs: class Model { // Value is compressed upon serialization (stringify) and decompressed on deserialization (objectify) [JsonCompress] public string Token {get;set;} [JsonCompress] public long ProductId {get;set;} } Arguments X Constructors Compress and decompress a String, Long or Int property or field on serialization and deserialization Useful when you want to minify long texts before sending to Client or upon receiving Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types public JsonCompressAttribute() X Model.cs: class Model { // Value is compressed upon serialization (stringify) and decompressed on deserialization (objectify) [JsonCompress] public string Token {get;set;} [JsonCompress] public long ProductId {get;set;} } X Methods When overridden in a derived class and ConverterType is null, allows the derived class to create a JsonConverter in order to pass additional state. Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types public override JsonConverter CreateConverter(Type typeToConvert) X Methods arguments Type Name Description Type typeToConvert The type of the converter. X Type Description JsonConverter The custom converter. Overrides JsonConverterAttribute.CreateConverter(Type) Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.JsonEncryptAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.JsonEncryptAttribute.html",
    "title": "JsonEncryptAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework.Attributes SystemLibrary.Common.Framework.Json.dll Encrypt and decrypt a String, Long or Int property or field on serialization and deserialization Useful when you want to hide productId's or similar in Frontend part of your application. Avoids having int's or ID's in the frontend, for attackers wanting to brute force endpoints taking INTs Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types JsonEncryptAttribute [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class JsonEncryptAttribute : JsonConverterAttribute Inheritance object Attribute JsonAttribute JsonConverterAttribute JsonEncryptAttribute Inherited Members JsonConverterAttribute.ConverterType Examples X Model.cs: class Model { // Value is encrypted upon serialization (stringify) and decrypted on deserialization (objectify) [JsonEncrypt] public string Token {get;set;} [JsonEncrypt] public string ProductId {get;set;} } Arguments X Constructors Encrypt and decrypt a String, Long or Int property or field on serialization and deserialization Useful when you want to hide productId's or similar in Frontend part of your application. Avoids having int's or ID's in the frontend, for attackers wanting to brute force endpoints taking INTs Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types public JsonEncryptAttribute(string key = null, string IV = null, bool addedIV = true) X Model.cs: class Model { // Value is encrypted upon serialization (stringify) and decrypted on deserialization (objectify) [JsonEncrypt] public string Token {get;set;} [JsonEncrypt] public string ProductId {get;set;} } X Methods arguments Type Name Description string key string IV bool addedIV Methods When overridden in a derived class and ConverterType is null, allows the derived class to create a JsonConverter in order to pass additional state. Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types public override JsonConverter CreateConverter(Type typeToConvert) X Methods arguments Type Name Description Type typeToConvert The type of the converter. X Type Description JsonConverter The custom converter. Overrides JsonConverterAttribute.CreateConverter(Type) Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.JsonObfuscateAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.JsonObfuscateAttribute.html",
    "title": "JsonObfuscateAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework.Attributes SystemLibrary.Common.Framework.Json.dll Obfuscate and deobfuscate a String, Long or Int property or field on serialization and deserialization Useful when you want to hide productId's or similar in Frontend part of your application when an object is exposed through an API response for instance. Avoids having int's or ID's in the frontend, for attackers wanting to brute force endpoints taking INTs Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types JsonObfuscateAttribute [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class JsonObfuscateAttribute : JsonConverterAttribute Inheritance object Attribute JsonAttribute JsonConverterAttribute JsonObfuscateAttribute Inherited Members JsonConverterAttribute.ConverterType Examples X Model.cs: class Model { // Value is obfuscated upon serialization (stringify) and deobfuscated on deserialization (objectify) [JsonObfuscate] public string Token {get;set;} [JsonObfuscate] public string ProductId {get;set;} } Arguments X Constructors Obfuscate and deobfuscate a String, Long or Int property or field on serialization and deserialization Useful when you want to hide productId's or similar in Frontend part of your application when an object is exposed through an API response for instance. Avoids having int's or ID's in the frontend, for attackers wanting to brute force endpoints taking INTs Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types public JsonObfuscateAttribute(int salt = 77) X Model.cs: class Model { // Value is obfuscated upon serialization (stringify) and deobfuscated on deserialization (objectify) [JsonObfuscate] public string Token {get;set;} [JsonObfuscate] public string ProductId {get;set;} } X Methods arguments Type Name Description int salt Methods When overridden in a derived class and ConverterType is null, allows the derived class to create a JsonConverter in order to pass additional state. Remarks X Does not support all property/field types, but at least supports: int, int16, uint, int64, uint64 and string types public override JsonConverter CreateConverter(Type typeToConvert) X Methods arguments Type Name Description Type typeToConvert The type of the converter. X Type Description JsonConverter The custom converter. Overrides JsonConverterAttribute.CreateConverter(Type) Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Attributes.html",
    "title": "SystemLibrary.Common.Framework.Attributes",
    "summary": "SystemLibrary.Common.Framework.Attributes Classes ConfigDecryptAttribute Marks a property as the placeholder for a decrypted config value. The property must be public, instance-level, with both get and set accessors. Used internally by Config to locate and decrypt values marked with DecryptAttribute on instantiation. Values must be encrypted using the parameterless Encrypt() method. See StringExtensions.Encrypt() for details. JsonCompressAttribute Compress and decompress a String, Long or Int property or field on serialization and deserialization Useful when you want to minify long texts before sending to Client or upon receiving JsonEncryptAttribute Encrypt and decrypt a String, Long or Int property or field on serialization and deserialization Useful when you want to hide productId's or similar in Frontend part of your application. Avoids having int's or ID's in the frontend, for attackers wanting to brute force endpoints taking INTs JsonObfuscateAttribute Obfuscate and deobfuscate a String, Long or Int property or field on serialization and deserialization Useful when you want to hide productId's or similar in Frontend part of your application when an object is exposed through an API response for instance. Avoids having int's or ID's in the frontend, for attackers wanting to brute force endpoints taking INTs"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Clock.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Clock.html",
    "title": "Clock",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll A Clock to measure an actions execution time based on Stopwatch Clock public static class Clock Inheritance object Clock Examples Arguments X Methods Measure an actions execution time in milliseconds used Specify a message to also Log.Debug() the output public static long Measure(Action method, string message = null) X Clock.Measure(() => \"hello\", \"Print hello\"); X Methods arguments Type Name Description Action method string message X Type Description long Milliseconds used let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Config-1.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Config-1.html",
    "title": "Config<T>",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Loads and reads configuration files (.xml, .json, or .config), applies transformations, and decrypts encrypted properties. Configs can be placed in: ~/*.json, ~/*.xml, ~/Configs/**, ~/Configurations/**, or appended to appsettings.json. Transformations use the ASPNETCORE_ENVIRONMENT variable. Set ASPNETCORE_ENVIRONMENT in: - launchSettings.json (IIS Express/Kestrel) - web.config (IIS/IIS Express) - mstest.runsettings (unit tests) - command-line --configuration (executables) Remarks X Config is a singleton, loaded once. See documentation for EnvironmentConfig.Name for environment setup examples. An encrypted property such as ApiToken {get;set;} can be automatically decrypted by adding a matching property ApiTokenDecrypt {get;set;} or mark it with [ConfigDecryptAttribute]. Environment variables like UserName apply only when reading appSettings, not custom config files. WARNING: Generic type T cannot be a nested class. Config<T> public abstract class Config<T> where T : class Inheritance object Config<T> EnvironmentConfig<T, TEnvironmentNameEnum> Type Parameters Name Description T T is the class inheriting Config<>, also referenced as 'self'. Note that T cannot be a nested class Examples X Create new file '~/TestConfig.json' Can also be placed under ~/Configs/ or ~/Configurations/ { \"Name\": \"Hello World\", \"Number\": 1234, \"Options\": { \"Url\": \"https://....\", }, \"ValidPhoneNumbers\": [0,1,2,3] \"password\": \"/HjLI26feCvCwaBOmXfu6ZFK1KLR33YbAdDZIlzuM5I=\", } Create C# class with same name as your newly created json file and inherit Config<>: public class TestConfig : Config<TestConfig> { public string Name { get; set; } public int Number { get; set;} public ApiOptions Options { get; set; } public int[] ValidPhoneNumbers { get; set; } public class Password { get; set; } // Contains encrypted value public class PasswordDecrypt { get; set; } // Contains decrypted Password at runtime } public class ApiOptions { public string Url { get; set; } } Usage: var testConfig = TestConfig.Current; var name = testConfig.Name; // name is now Hello World Add transformation per 'environmnet' to our newly created TestConfig.json Add transformation for an environment, lets call it 'dev' Create TestConfig.dev.json file, place it in same folder as TestConfig.json Visual Studio should mark the new file as 'IsTransformFile=true' and 'DependentUpon=TestConfig.json' If not, try dragging \"TestConfig.dev.json\" in under \"TestConfig.json\" via Solution Explorer Define only variables that we want to transform: { \"Name\": \"Hello Dev!\", } Here are three ways of specifying the environment, by either launchSettings.json, web.config or mstest.runsettings. 1 launchSettings.json with IIS: { ... { \"profiles\": { \"IIS\": { \"environmentVariables\": { \"ASPNETCORE_ENVIRONMENT\": \"Dev\", } } } } ... } 2 web.config with IIS or IISExpress: <configuration> <location path = \".\" inheritInChildApplications=\"false\"> </system.webServer> <aspNetCore processPath = \"bin\\Demo.exe\" arguments=\"\" stdoutLogEnabled=\"false\" hostingModel=\"inprocess\"> <environmentVariables> <environmentVariable name = \"ASPNETCORE_ENVIRONMENT\" value=\"Dev\" /> </environmentVariables> </aspNetCore> </system.webServer> </location> </configuration> 3 mstest.runsettings if running through Test Explorer (unit tests): Note: add mstest.runsettings to your csproj-variable: 'RunSettingsFilePath' Tip: View source code of SystemLibrary.Common.Framework.Tests inside the repo SystemLibrary.Common.Framework on github <RunSettings> <RunConfiguration> <EnvironmentVariables> <ASPNETCORE_ENVIRONMENT>Dev</ASPNETCORE_ENVIRONMENT> Usage: Assume IISExpress and web.config setup above: var testConfig = TestConfig.Current; var name = testConfig.Name; // name is now equal to 'Hello Dev!', which is our transformed value Arguments X Generic types Name Description T T is the class inheriting Config<>, also referenced as 'self'. Note that T cannot be a nested class Fields Gets the current configuration as a singleton object, always instantiated, thread-safe, and should not throw exceptions. Remarks X Config is a singleton, loaded once. See documentation for EnvironmentConfig.Name for environment setup examples. An encrypted property such as ApiToken {get;set;} can be automatically decrypted by adding a matching property ApiTokenDecrypt {get;set;} or mark it with [ConfigDecryptAttribute]. Environment variables like UserName apply only when reading appSettings, not custom config files. WARNING: Generic type T cannot be a nested class. public static T Current X Field Value Type Description T Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.DateJsonConverter.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.DateJsonConverter.html",
    "title": "DateJsonConverter",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Json.dll Use to convert a DateTime into a string date 'yyyy-MM-dd', ignoring time DateJsonConverter public class DateJsonConverter : JsonConverter<DateTime> Inheritance object JsonConverter JsonConverter<DateTime> DateJsonConverter Inherited Members JsonConverter<DateTime>.CanConvert(Type) JsonConverter<DateTime>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateTime>.WriteAsPropertyName(Utf8JsonWriter, DateTime, JsonSerializerOptions) JsonConverter<DateTime>.HandleNull JsonConverter<DateTime>.Type Examples X Example: var options = new JsonSerializationOptions(); options.Converters.Add(new DateJsonConverter()); var user = new User(); user.Birth = DateTime.Christmas() var json = user.Json(options) // json.Birth is now a string \"yyyy-12-24\" Example on a specific property: [JsonConverter(typeof(DateJsonConverter))] public DateTime Birth {get;set;} Arguments X Constructors Use to convert a DateTime into a string date 'yyyy-MM-dd', ignoring time public DateJsonConverter() X Example: var options = new JsonSerializationOptions(); options.Converters.Add(new DateJsonConverter()); var user = new User(); user.Birth = DateTime.Christmas() var json = user.Json(options) // json.Birth is now a string \"yyyy-12-24\" Example on a specific property: [JsonConverter(typeof(DateJsonConverter))] public DateTime Birth {get;set;} X Methods Reads and converts the JSON to type DateTime. public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) X Methods arguments Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. X Type Description DateTime The converted value. Overrides JsonConverter<DateTime>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, DateTime date, JsonSerializerOptions options) X Methods arguments Type Name Description Utf8JsonWriter writer The writer to write to. DateTime date JsonSerializerOptions options An object that specifies serialization options to use. Overrides JsonConverter<DateTime>.Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.DateTimeJsonConverter.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.DateTimeJsonConverter.html",
    "title": "DateTimeJsonConverter",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Json.dll Use to convert a string to DateTime during Json() invocation with your own format Remarks X Used internally Exposed if someone needs a different format that this Library does not support out of the box when using Json() extension method DateTimeJsonConverter public class DateTimeJsonConverter : JsonConverter<DateTime> Inheritance object JsonConverter JsonConverter<DateTime> DateTimeJsonConverter Inherited Members JsonConverter<DateTime>.CanConvert(Type) JsonConverter<DateTime>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateTime>.WriteAsPropertyName(Utf8JsonWriter, DateTime, JsonSerializerOptions) JsonConverter<DateTime>.HandleNull JsonConverter<DateTime>.Type Examples X Example: var options = new JsonSerializationOptions(); options.Converters.Add(new DateTimeJsonConverter(\"yyyy/MM/dd hh:mm\")); // Assume \"json\" is a string and somewhere there's a date on format \"2000/12/24 12:30\" var result = json.Json(options); Arguments X Constructors Use to convert a string to DateTime during Json() invocation with your own format Remarks X Used internally Exposed if someone needs a different format that this Library does not support out of the box when using Json() extension method public DateTimeJsonConverter(string format = null) X Example: var options = new JsonSerializationOptions(); options.Converters.Add(new DateTimeJsonConverter(\"yyyy/MM/dd hh:mm\")); // Assume \"json\" is a string and somewhere there's a date on format \"2000/12/24 12:30\" var result = json.Json(options); X Methods arguments Type Name Description string format Methods Reads and converts the JSON to type DateTime. Remarks X Used internally Exposed if someone needs a different format that this Library does not support out of the box when using Json() extension method public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) X Methods arguments Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. X Type Description DateTime The converted value. Overrides JsonConverter<DateTime>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Writes a specified value as JSON. Remarks X Used internally Exposed if someone needs a different format that this Library does not support out of the box when using Json() extension method public override void Write(Utf8JsonWriter writer, DateTime date, JsonSerializerOptions options) X Methods arguments Type Name Description Utf8JsonWriter writer The writer to write to. DateTime date JsonSerializerOptions options An object that specifies serialization options to use. Overrides JsonConverter<DateTime>.Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.DateTimeOffsetJsonConverter.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.DateTimeOffsetJsonConverter.html",
    "title": "DateTimeOffsetJsonConverter",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Json.dll DateTime json converter that takes a string format Remarks X Used internally Exposed if someone needs a different format that this Library does not support out of the box when using Json() extension method DateTimeOffsetJsonConverter public class DateTimeOffsetJsonConverter : JsonConverter<DateTimeOffset> Inheritance object JsonConverter JsonConverter<DateTimeOffset> DateTimeOffsetJsonConverter Inherited Members JsonConverter<DateTimeOffset>.CanConvert(Type) JsonConverter<DateTimeOffset>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateTimeOffset>.WriteAsPropertyName(Utf8JsonWriter, DateTimeOffset, JsonSerializerOptions) JsonConverter<DateTimeOffset>.HandleNull JsonConverter<DateTimeOffset>.Type Examples X Example of an additional datetime converter: var options = new JsonSerializationOptions(); options.Converters.Add(new DateTimeJsonConverter(\"yyyy/MM/dd hh:mm\")); Arguments X Constructors DateTime json converter that takes a string format Remarks X Used internally Exposed if someone needs a different format that this Library does not support out of the box when using Json() extension method public DateTimeOffsetJsonConverter(string format) X Example of an additional datetime converter: var options = new JsonSerializationOptions(); options.Converters.Add(new DateTimeJsonConverter(\"yyyy/MM/dd hh:mm\")); X Methods arguments Type Name Description string format Methods Reads and converts the JSON to type DateTimeOffset. Remarks X Used internally Exposed if someone needs a different format that this Library does not support out of the box when using Json() extension method public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) X Methods arguments Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. X Type Description DateTimeOffset The converted value. Overrides JsonConverter<DateTimeOffset>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Writes a specified value as JSON. Remarks X Used internally Exposed if someone needs a different format that this Library does not support out of the box when using Json() extension method public override void Write(Utf8JsonWriter writer, DateTimeOffset date, JsonSerializerOptions options) X Methods arguments Type Name Description Utf8JsonWriter writer The writer to write to. DateTimeOffset date JsonSerializerOptions options An object that specifies serialization options to use. Overrides JsonConverter<DateTimeOffset>.Write(Utf8JsonWriter, DateTimeOffset, JsonSerializerOptions) Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.DelegateJsonConverter.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.DelegateJsonConverter.html",
    "title": "DelegateJsonConverter",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Json.dll DelegateJsonConverter public class DelegateJsonConverter : JsonConverter<object> Inheritance object JsonConverter JsonConverter<object> DelegateJsonConverter Inherited Members JsonConverter<object>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<object>.WriteAsPropertyName(Utf8JsonWriter, object, JsonSerializerOptions) JsonConverter<object>.HandleNull JsonConverter<object>.Type Examples Arguments X Methods Determines whether the specified type can be converted. public override bool CanConvert(Type typeToConvert) X Methods arguments Type Name Description Type typeToConvert The type to compare against. X Type Description bool true if the type can be converted; otherwise, false. Overrides JsonConverter<object>.CanConvert(Type) Reads and converts the JSON to type object. public override object Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) X Methods arguments Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. X Type Description object The converted value. Overrides JsonConverter<object>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, object value, JsonSerializerOptions options) X Methods arguments Type Name Description Utf8JsonWriter writer The writer to write to. object value The value to convert to JSON. JsonSerializerOptions options An object that specifies serialization options to use. Overrides JsonConverter<object>.Write(Utf8JsonWriter, object, JsonSerializerOptions) Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnumTextAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnumTextAttribute.html",
    "title": "EnumTextAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Decorate the enum key with text. EnumTextAttribute [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public class EnumTextAttribute : Attribute Inheritance object Attribute EnumTextAttribute Examples X enum Color { [EnumText(\"Black Colored Text\")] Black, White } var color = Color.Black; var value = color.ToText(); var value2 = Color.White.ToText(); // 'value' is now \"Black Colored Text\" // 'value2' is now \"White\", // Note: .ToText() falls back to the ToString() representation of the enum key. var value = Color.White.GetEnumText(); // 'value' is now null, as 'White' does not contain the EnumTextAttribute. var value = Color.Black.GetEnumText(); // 'value' is now a string with the value 'Black Colored Text', as 'Black' has the EnumTextAttribute. Arguments X Constructors Decorate the enum key with text. public EnumTextAttribute(string text = null) X Methods arguments Type Name Description string text Sets additional text metadata for the enum key. Fields Decorate the enum key with text. public string Text X Field Value Type Description string Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnumValueAttribute.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnumValueAttribute.html",
    "title": "EnumValueAttribute",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Decorate the enum key with a value. Remarks X The string extension Json() will try matching a value in a json-string to the EnumValue specified first, and fall back to normal behavior if no match The string extension Json() will output the EnumValue if specified, when converting a class to json-string EnumValueAttribute [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public class EnumValueAttribute : Attribute Inheritance object Attribute EnumValueAttribute Examples X enum Color { [EnumValue(\"#000\")] [EnumText(\"Hello Black\")] Black, [EnumText(\"Hello White\")] White, Pink } var black = Color.Black; var value = black.ToValue(); // 'value' is now \"#000\" var value = Color.White.ToValue(); // 'value' is now \"White\" var value = Color.Pink.ToValue(); // 'value' is now 'Pink' // Note: ToValue() falls back to \"ToString()\" on the enum key var value = Color.Pink.GetEnumValue(); // 'value' is now null, as Pink does not have a EnumValueAttribute var value = Color.Black.GetEnumValue(); // 'value' is now an object with value \"#000\", so it is castable to string // Note: GetEnumValue() returns null if the enum key does not have the attribute declared, or if the actual value of the EnumValueAttribute is null. Arguments X Constructors Decorate the enum key with a value. Remarks X The string extension Json() will try matching a value in a json-string to the EnumValue specified first, and fall back to normal behavior if no match The string extension Json() will output the EnumValue if specified, when converting a class to json-string public EnumValueAttribute(object value) X enum Color { [EnumValue(\"#000\")] [EnumText(\"Hello Black\")] Black, [EnumText(\"Hello White\")] White, Pink } var black = Color.Black; var value = black.ToValue(); // 'value' is now \"#000\" var value = Color.White.ToValue(); // 'value' is now \"White\" var value = Color.Pink.ToValue(); // 'value' is now 'Pink' // Note: ToValue() falls back to \"ToString()\" on the enum key var value = Color.Pink.GetEnumValue(); // 'value' is now null, as Pink does not have a EnumValueAttribute var value = Color.Black.GetEnumValue(); // 'value' is now an object with value \"#000\", so it is castable to string // Note: GetEnumValue() returns null if the enum key does not have the attribute declared, or if the actual value of the EnumValueAttribute is null. X Methods arguments Type Name Description object value Fields Decorate the enum key with a value. Remarks X The string extension Json() will try matching a value in a json-string to the EnumValue specified first, and fall back to normal behavior if no match The string extension Json() will output the EnumValue if specified, when converting a class to json-string public object Value X enum Color { [EnumValue(\"#000\")] [EnumText(\"Hello Black\")] Black, [EnumText(\"Hello White\")] White, Pink } var black = Color.Black; var value = black.ToValue(); // 'value' is now \"#000\" var value = Color.White.ToValue(); // 'value' is now \"White\" var value = Color.Pink.ToValue(); // 'value' is now 'Pink' // Note: ToValue() falls back to \"ToString()\" on the enum key var value = Color.Pink.GetEnumValue(); // 'value' is now null, as Pink does not have a EnumValueAttribute var value = Color.Black.GetEnumValue(); // 'value' is now an object with value \"#000\", so it is castable to string // Note: GetEnumValue() returns null if the enum key does not have the attribute declared, or if the actual value of the EnumValueAttribute is null. X Field Value Type Description object Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnvironmentConfig-2.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnvironmentConfig-2.html",
    "title": "EnvironmentConfig<T, TEnvironmentNameEnum>",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll EnvironmentConfig with an option to pass your own Configuration class, along with an enum that defines all environment names. EnvironmentConfig<T, TEnvironmentNameEnum> public abstract class EnvironmentConfig<T, TEnvironmentNameEnum> : Config<T> where T : class where TEnvironmentNameEnum : struct, IComparable, IFormattable, IConvertible Inheritance object Config<T> EnvironmentConfig<T, TEnvironmentNameEnum> EnvironmentConfig Inherited Members Config<T>.Current Type Parameters Name Description T TEnvironmentNameEnum Examples Arguments X Generic types Name Description T TEnvironmentNameEnum Properties Returns the Environment Name as an Enum public TEnvironmentNameEnum EnvironmentName { get; } X Property Value Type Description TEnvironmentNameEnum Returns the environment name based on the ASPNETCORE_ENVIRONMENT variable passed during the startup of your application. This variable name is used for configuration transformations for all C# config classes that inherit from Config<>. Remarks X Changing the environment name requires a shell restart (e.g., iisreset). Transformation for the EnvironmentConfig class is run based on the ASPNETCORE_ENVIRONMENT passed. Additionally, a environmentConfig.someEnvName.json file may include a Name that differs from the environment name, in which case this Name in the transformed file will be returned instead. public string Name { get; set; } X Test Explorer if: mstest.runsettings contains 'ASPNETCORE_ENVIRONMENT' variable then: sets 'temp environment' as value if: 'temp environment' is set, but no transformation is found then: sets 'temp environment' as value from 'Configuration Mode' in Visual Studio else: then: sets 'temp environment' as value from 'Configuration Mode' in Visual Studio if: environmentConfig.json exists if transformation file exists for 'temp environment' then: run transformation for environmentConfig.json if: environmentConfig.json contains 'name' property return: 'value' if: mstest.runsettings contains 'ASPNETCORE_ENVIRONMENT' variable return: 'value' if: ASPNETCORE_ENVIRONMENT exists in 'Environment Variables on Windows' return: 'value' return: \"\" as 'name', never null Console Application if: environmentConfig.json do not exists: if: mstest.runsettings contains 'ASPNETCORE_ENVIRONMENT' variable return: 'value' if: ASPNETCORE_ENVIRONMENT exists in 'Environment Variables on Windows' return: 'value' else if: if: environmentConfig has transformation equal to 'configuration' pass in as argument then: run transformation if: environmentConfig has property 'name' return: 'value' return: \"\" as 'name', never null DOTNET TEST 'csproj' --configuration 'release|debug|etc..' command if: environmentConfig.json do not exists: if: mstest.runsettings contains 'ASPNETCORE_ENVIRONMENT' variable return: 'value' if: ASPNETCORE_ENVIRONMENT exists in 'Environment Variables on Windows' return: 'value' else if: if: environmentConfig has transformation equal to 'configuration' pass in as argument then: run transformation if: environmentConfig has property 'name' return: 'value' return: \"\" as 'name', never null IISExpress if: launchSettings.json exists if: command \"IISExpress\" exists and contains environment variable 'ASPNETCORE_ENVIRONMENT' if: 'ASPNETCORE_ENVIRONMENT' exists if: environmentConfig.json exists if: transformation file exists for 'value' then: run transformation if: environmentConfig contains 'name' property return: 'value' return: 'value' if: 'ASPNETCORE_ENVIRONMENT' exists in web.config if: environmentConfig.json exists if: transformation file exists for 'value' then: run transformation if: environmentConfig contains 'name' property return: 'value' return: 'value' if: 'ASPNETCORE_ENVIRONMENT' exists as a 'environment variable' in Windows if: environmentConfig.json exists if: transformation file exists for 'value' then: run transformation if: environmentConfig contains 'name' property return: 'value' return: 'value' if: launchSettings.json exists if: \"iisSettings\" contains \"iisExpress\" and contains environment variable 'ASPNETCORE_ENVIRONMENT' if: environmentConfig.json exists if: transformation file exist for 'value' then: run transformation if: environmentConfig.json contains 'name' property return: 'value' return: 'value' if: \"iisSettings\" contains environment variable 'ASPNETCORE_ENVIRONMENT' if: environmentConfig.json exists if: transformation file exists for 'value' then: run transformation if: environmentConfig.json contains 'name' property return: 'value' return: 'value' if: command \"IIS\" exists and contains environment variable 'ASPNETCORE_ENVIRONMENT' if: environmentConfig.json exists if: transformation file exists for 'value' then: run transformation if: environmentConfig.json contains 'name' property return: 'value' if: environmentConfig.json exists if: environmentConfig.json contains 'name' property return: 'value' return: \"\" as 'name', never null IIS if: 'ASPNETCORE_ENVIRONMENT' exists in web.config if: environmentConfig.json exists if: transformation file exists 'value' then: run transformation if: environmentConfig.json contains 'name' property return: 'value' return: 'value' if: launchSettings.json exists if: \"iisSettings\" contains \"iisExpress\" if: \"iisExpress\" contains 'environmentVariables' if: 'ASPNETCORE_ENVIRONMENT' exists if: environmentConfig.json exists if: transformation file exist for 'value' then: run transformation if: environmentConfig.json contains 'name' property return: 'value' if: \"iisSettings\" contains 'environmentVariables' if: 'ASPNETCORE_ENVIRONMENT' exists if: environmentConfig.json exists if: transformation file exist for 'value' then: run transformation if: environmentConfig.json contains 'name' property return: 'value' if: \"profiles\" exists if: command \"IIS\" exists and contains 'environmentVariables' if: 'ASPNETCORE_ENVIRONMENT' exists if: environmentConfig.json exists if: trnasformation file exists for 'value' then: transformation is ran if: environmentConfig.json contains 'name' property return: 'value' return: 'value' return: \"\" as 'name', never null X Property Value Type Description string Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnvironmentConfig.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnvironmentConfig.html",
    "title": "EnvironmentConfig",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Standard class for environmental configurations read from environmentConfig.json if exists If you've added more properties to environmentConfig.json than just the 'Name' you'd have to inherit 'EnvironmentConfig<YourClass>' and use that instead Remarks X See the documentation for 'Name' property on class 'EnvironmentConfig<>' for more details regarding transformations EnvironmentConfig public class EnvironmentConfig : EnvironmentConfig<EnvironmentConfig, EnvironmentName> Inheritance object Config<EnvironmentConfig> EnvironmentConfig<EnvironmentConfig, EnvironmentName> EnvironmentConfig Inherited Members EnvironmentConfig<EnvironmentConfig, EnvironmentName>.EnvironmentName EnvironmentConfig<EnvironmentConfig, EnvironmentName>.Name Config<EnvironmentConfig>.Current Examples Arguments X Fields Returns the application's root folder full path. Does not end with a slash. If the folder is 'bin' or inside it, the method will traverse up and return the parent folder of the 'bin' folder. Exceptions is if assembly ends in Tests for test projects, then 'up-traversal out of bin' is skipped Remarks X See the documentation for 'Name' property on class 'EnvironmentConfig<>' for more details regarding transformations public static readonly string ContentRootPath X Field Value Type Description string Properties Returns true if both IsTest and IsProd are false. Remarks X See the documentation for 'Name' property on class 'EnvironmentConfig<>' for more details regarding transformations public static bool IsLocal { get; } X Property Value Type Description bool Returns true if the environment is set to 'prod' or 'production', otherwise false. Remarks X See the documentation for 'Name' property on class 'EnvironmentConfig<>' for more details regarding transformations public static bool IsProd { get; } X Property Value Type Description bool Returns true if both IsLocal and IsProd are false Note: returns true for Test, PreProduction, Sandbox, Stage, QA and more... Remarks X See the documentation for 'Name' property on class 'EnvironmentConfig<>' for more details regarding transformations public static bool IsTest { get; } X Property Value Type Description bool Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnvironmentName.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.EnvironmentName.html",
    "title": "EnvironmentName",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not EnvironmentName public enum EnvironmentName Examples Arguments X Fields Name Summary AT Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Build Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not CI Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not ContinuousIntegration Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Dev Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Development Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Integration Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Local Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not None Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not PreProd Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not PreProduction Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Prod Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Production Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not QA Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Sandbox Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Stage Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Staging Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Test Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not UAT Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not UnitTest Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not Extension Methods EnumExtensions.GetEnumText(Enum) EnumExtensions.GetEnumValue(Enum) EnumExtensions.IsAny(Enum, params Enum[]) EnumExtensions.ToText(Enum) EnumExtensions.ToValue(Enum) ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i].endsWith(']') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if(isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if(argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if(dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if(typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if(propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('public ', '').replace('override ', '').replace('protected ', ''); if(isClickable === true) { let txt = items[i].innerHTML; if(txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if(parent) { if(parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if(items != null && items.length > 0) { if(items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if(viewSources != null && viewSources.length > 0) { if(viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if(par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if(sidetocs) { let wrapper = sidetocs[0]; if(wrapper) { wrapper.addEventListener('click', function () { if(wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if(activeElements) { for(var i = 0; i < activeElements.length; i++){ let activeEle = activeElements[i]; if(activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (menuData.children === null || typeof (menuData.children) === 'undefined' || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); var container = this.parentNode while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if(!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if(next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if(docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideEnumTableSummariesInheritedFromClass() { const enumSummary = document.querySelector('div.markdown.level0.summary.h1-class-summary'); if (!enumSummary || !enumSummary.innerHTML) return; const enumSummaryHtml = enumSummary.innerHTML.trim(); document.querySelectorAll('.custom-class-content-inline').forEach(div => { const table = div.querySelector('table.table-condensed'); if (!table) return; table.querySelectorAll('tbody tr').forEach(tr => { const tds = tr.querySelectorAll('td'); if (!tds.length || tds.length <= 1) return; const lastTd = tds[tds.length - 1]; if (lastTd.innerHTML.trim() === enumSummaryHtml) { lastTd.innerHTML = ''; } }); }); } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(updateClassNames, 10); setTimeout(hideEnumTableSummariesInheritedFromClass, 10); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 15); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 20); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 25); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 66); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 45); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 50); setTimeout(() => hideAllEmptyMarkdowns(), 30); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 35); setTimeout(addEventsToTabCloseButtons, 40); //setTimeout(removeEmptyPopups, 50); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ArrayExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ArrayExtensions.html",
    "title": "ArrayExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll This class contains extension methods for Arrays ArrayExtensions public static class ArrayExtensions Inheritance object ArrayExtensions Examples Arguments X Methods Add one array with another, resulting in a new array - Pass a predicate method to filter out values public static T[] Add<T>(this T[] current, Func<T, bool> predicate, params T[][] additional) X var arr = new int [] { 3,4 }; var arr2 = new int [] { 1,2,3 }; var arr3 = arr.Add((i) => i > 1, arr2); // arr3 now contains { 2,3,3,4 }, in that order, note the duplicated values X Generic types Name Description T Methods arguments Type Name Description T[] current Func<T, bool> predicate T[][] additional X Type Description T[] Returns null if everything is null, else a new array of items Add one array with another, resulting in a new array public static T[] Add<T>(this T[] current, params T[][] additional) X var arr = new int [] { 2 }; var arr2 = new int [] { 1 }; var arr3 = arr.Add(arr2); // arr3 now contains { 2, 1 }, in that order X Generic types Name Description T Methods arguments Type Name Description T[] current T[][] additional X Type Description T[] Returns null or a new array let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ByteArrayExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ByteArrayExtensions.html",
    "title": "ByteArrayExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll Byte array extensions ByteArrayExtensions public static class ByteArrayExtensions Inheritance object ByteArrayExtensions Examples Arguments X Methods Byte array extensions public static string Compress(this byte[] bytes) X Methods arguments Type Name Description byte[] bytes X Type Description string Byte array extensions public static string Decompress(this byte[] bytes, Encoding encoding = null) X Methods arguments Type Name Description byte[] bytes Encoding encoding X Type Description string Return a base64 string of the bytes Remarks X If you dont need base64 format, .Obfuscating() method is faster if data is less than ~400KB public static string ToBase64(this byte[] bytes) X var bytes = \"hello world\".GetBytes(); var base64string = bytes.ToBase64(); X Methods arguments Type Name Description byte[] bytes X Type Description string Returns Base64 string or null or empty if input was so Returns a hash string of the bytes Remarks X If data is larger than ~200 bytes then .ToSha1Hash() is faster public static string ToMD5Hash(this byte[] bytes) X var bytes = \"hello world\".GetBytes(); var md5string = bytes.ToMD5Hash(); X Methods arguments Type Name Description byte[] bytes X Type Description string Md5 hash or null or empty if input was so Returns a sha1 hash string of the bytes Remarks X If data is less than ~200 bytes then .ToMD5Hash() is faster public static string ToSha1Hash(this byte[] bytes) X var bytes = \"hello world\".GetBytes(); var sha1string = bytes.ToSha1Hash(); X Methods arguments Type Name Description byte[] bytes X Type Description string A Sha1 hash or null or empty if input is null or empty Returns a sha 256 hash string of the bytes Remarks X If input is null or empty it returns null or empty string public static string ToSha256Hash(this byte[] bytes) X var bytes = \"hello world\".GetBytes(); var sha256string = bytes.ToSha256Hash(); X Methods arguments Type Name Description byte[] bytes X Type Description string A Sha256 hash, or null or empty if input was so Return a text representation of the byte array public static string ToText(this byte[] bytes, Encoding encoding = null) X var bytes = \"hello world\".GetBytes(); var text = bytes.ToText(); //text == hello world X Methods arguments Type Name Description byte[] bytes Encoding encoding X Type Description string Text, or null or empty if input was null or empty let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ConcurrentDictionaryExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ConcurrentDictionaryExtensions.html",
    "title": "ConcurrentDictionaryExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll Concurrent dictionary extensions ConcurrentDictionaryExtensions public static class ConcurrentDictionaryExtensions Inheritance object ConcurrentDictionaryExtensions Examples Arguments X Methods Get T from a static concurrent dictionary based on a key 'int' or adds it to dictionary before returnal Remarks X The static concurrent dictionary lives as long as application runs You are responsible for when to instantiate the dictionary Item limit per dictionary is set to 50.000 items, if reached the dictionary is cleaned and starts caching over again public static T Cache<T>(this ConcurrentDictionary<int, T> dictionary, int key, Func<T> getItem) X ConcurrentDictionary<int, string> cache = new ConcurrentDictionary<int, string>(); var result = cache.Cache(123, () => \"Hello world\"); X Generic types Name Description T Methods arguments Type Name Description ConcurrentDictionary<int, T> dictionary int key Func<T> getItem X Type Description T Returns T either from Cache or from the Method Get T from a static concurrent dictionary based on a key 'Type' or adds it to dictionary before returning Remarks X The static concurrent dictionary lives as long as application runs You are responsible for when to instantiate the dictionary Item limit per dictionary is set to 50.000 items, if reached the dictionary is cleaned and starts caching over again public static T Cache<T>(this ConcurrentDictionary<int, T> dictionary, Type type, Func<T> getItem) X Example of a Type passed in, its GetHashCode will be used to store as a Int: var type = typeof(Car); ConcurrentDictionary<int, string> cache = new ConcurrentDictionary<int, string>(); var result = cache.Cache(type, () => \"Hello world\"); X Generic types Name Description T Methods arguments Type Name Description ConcurrentDictionary<int, T> dictionary Type type Func<T> getItem X Type Description T Returns T either from Cache or from the Method Get T from a static concurrent dictionary based on a key 'string' or adds it to dictionary before returnal Remarks X The static concurrent dictionary lives as long as application runs You are responsible for when to instantiate the dictionary Item limit per dictionary is set to 50.000 items, if reached the dictionary is cleaned and starts caching over again public static T Cache<T>(this ConcurrentDictionary<string, T> dictionary, string key, Func<T> getItem) X Generic types Name Description T Methods arguments Type Name Description ConcurrentDictionary<string, T> dictionary string key Func<T> getItem X Type Description T Returns T either from Cache or from the Method let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.DynamicExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.DynamicExtensions.html",
    "title": "DynamicExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll This class contains extension methods for Dynamic objects Remarks X Current version of C# does not allow extension methods on 'dynamic', hence these are static methods DynamicExtensions public static class DynamicExtensions Inheritance object DynamicExtensions Examples Arguments X Methods Merge dynamic objects into a one new dynamic object The latter updating value takes precedence if both objects contains same property name Remarks X Current version of C# does not allow extension methods on 'dynamic', hence these are static methods public static dynamic Merge(dynamic source, params object[] updates) X var a = new { firstName = \"world\", age = 1 }; var b = new { firstName = \"hello\", Age = 2 }; var c = new { Age = 10 } var d = DynamicExtensions.Merge(a, b, c); // d contains 3 properties: firstName, age, Age // d's property values are now: hello, 1, 10 // var dictionary = d as IDictionary<string, object> // d can be cast to dictionary // dictionary[\"Age\"] will return 10 X Methods arguments Type Name Description dynamic source An anonymous/dynamic object object[] updates One or more anonymous/dynamic objects, but if error occurs, cast the 'updating' objects to an actual object before invoking this method X Type Description dynamic Returns a new dynamic object with the merge result, can be casted to IDictionary<string, object> let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.EnumExtensions-1.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.EnumExtensions-1.html",
    "title": "EnumExtensions<TEnum>",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll This class contains extension methods for Enum as a Generic Type Remarks X Current version of C# does not allow extension methods 'generic types', hence these are static methods EnumExtensions<TEnum> public static class EnumExtensions<TEnum> where TEnum : IComparable, IFormattable, IConvertible Inheritance object EnumExtensions<TEnum> Type Parameters Name Description TEnum Examples Arguments X Generic types Name Description TEnum Methods Get all keys as the enum value itself Remarks X Current version of C# does not allow extension methods 'generic types', hence these are static methods public static IEnumerable<TEnum> GetEnums() X enum Color { [EnumText(\"Black Colored Text\")] Black, White } var enums = SystemLibrary.Common.Framework.Extensions.EnumExtesions<Color>.GetEnums(); // enums is now: // enums[0] is Color.Black // enums[1] is Color.White X X Type Description IEnumerable<TEnum> IEnumerable of Enum of your choice Get all keys in the Enum as an IEnumerable of string Remarks X Current version of C# does not allow extension methods 'generic types', hence these are static methods public static IEnumerable<string> GetKeys() X enum Color { [EnumText(\"Black Colored Text\")] Black, White } var keys = SystemLibrary.Common.Framework.Extensions.EnumExtesions<Color>.GetKeys(); // keys[0] is 'Black' // keys[1] is 'White // Note: it returns the Keys converted to strings only, ignoring EnumText attribute X X Type Description IEnumerable<string> Keys as an IEnumerable of string This class contains extension methods for Enum as a Generic Type Remarks X Current version of C# does not allow extension methods 'generic types', hence these are static methods public static IEnumerable<string> GetValues() X X Type Description IEnumerable<string> let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.EnumExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.EnumExtensions.html",
    "title": "EnumExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll Extension methods for Enums like ToText(), ToValue(), IsAny(), ... EnumExtensions public static class EnumExtensions Inheritance object EnumExtensions Examples Arguments X Methods Gets the EnumText attribute's object value public static string GetEnumText(this Enum enumField) X enum EnumColor { [EnumText(\"White\")] [EnumValue(1234)] Black, [EnumText((string)null)] Red, Pink } var value = EnumColor.Black.GetEnumText(); // \"White\" var value = EnumColor.Red.GetEnumText(); // null var value = EnumColor.Pink.GetEnumText(); // null X Methods arguments Type Name Description Enum enumField X Type Description string Returns EnumText attributes value or null if not defined Gets the EnumValue-attribute's object value public static object GetEnumValue(this Enum enumField) X enum EnumColor { [EnumText(\"White\")] [EnumValue(1234)] Black, [EnumValue(null)] Blue, Pink } var value = EnumColor.Black.GetEnumValue(); // 1234, an int var value = EnumColor.Pink.GetEnumValue(); // null as Pink does not have the EnumValue attribute var value = EnumColor.Blue.GetEnumValue(); // null as Blue have null as the EnumValue X Methods arguments Type Name Description Enum enumField X Type Description object Returns EnumValue attribute's value or null if not exist Check if Enum is matching any in the array public static bool IsAny(this Enum enumField, params Enum[] values) X enum Color { Black, White, Red, Blue } var red = Color.Red; if(red.IsAny(Color.Black, Color.Blue)) { //Never hit, red is Red, never blue/black } X Methods arguments Type Name Description Enum enumField Enum[] values X Type Description bool True or false Gets the EnumText attribute's value, fallback to enumField.ToString() public static string ToText(this Enum enumField) X enum EnumColor { [EnumText(\"White\")] [EnumValue(\"BlackAndWhite\")] Black, Pink } var value = EnumColor.Black.ToText(); // White var value = EnumColor.Pink.ToText(); // Pink X Methods arguments Type Name Description Enum enumField X Type Description string Returns the text in EnumText attribute or Enum as string or null if nullwas passed Gets the EnumValue attribute's value, fallback to enumField.ToString() public static string ToValue(this Enum enumField) X enum EnumColor { [EnumText(\"White\")] [EnumValue(1234)] Black, [EnumValue(null)] Blue, Pink } var value = EnumColor.Black.ToValue(); // \"1234\" as string var value = EnumColor.Pink.ToValue(); // Pink, does not have the EnumValue attribute so it falls back to Pink as a string var value = EnumColor.Blue.ToValue(); // value is null, as Blue have EnumValue null X Methods arguments Type Name Description Enum enumField X Type Description string Returns value of EnumValue attribute if exist, or Enum as string let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.IEnumerableExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.IEnumerableExtensions.html",
    "title": "IEnumerableExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll This class contains extension methods for IEnumerables IEnumerableExtensions public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Examples Arguments X Methods Select items grouped by a property of your choice public static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> items, Func<T, TKey> selector) where T : class X class Car { public string Name; } var car1 = new Car { Name = \"Vehicle\" } var car2 = new Car { Name = \"Vehicle\" } var list = new List<Car> { car1, car2 } var list = list.DistinctBy(x => x.Name).ToList(); // list contains now 1 car X Generic types Name Description T TKey Methods arguments Type Name Description IEnumerable<T> items Func<T, TKey> selector X Type Description IEnumerable<T> IEnumerable filtered on the property of your choice Check if the enumerable contains 'value', does not throw if value is null Remarks X Uses Linq.Contains() internally public static bool Has<T>(this IEnumerable<T> enumerable, object value) where T : class X var users = new List<User>(); var user = new User(); users.Add(user); var result = users.Has(user); // result is true, the list contains that specific user object X Generic types Name Description T Methods arguments Type Name Description IEnumerable<T> enumerable object value X Type Description bool Returns true or false Check if the IEnumerable contains 'value' Does not throw on null Remarks X Uses Linq.Contains() internally, but does not throw on null public static bool Has<T>(this IEnumerable<T> enumerable, T value) where T : IComparable, IConvertible X var texts = new string[] { \"Hello\", \"World\" }; var has = texts.Has(\"Abc\"); //has is False X Generic types Name Description T Methods arguments Type Name Description IEnumerable<T> enumerable T value X Type Description bool Returns true or false Checks if the Enumerable exists and has at least 1 item Remarks X Does not throw exception on null public static bool IsNot<T>(this IEnumerable<T> enumerable) X var list = new List<string>(); var result = list.IsNot(); // result is true as the list contains 0 items List<string> list = null; var result = list.IsNot(); // result is true as the list currently is null X Generic types Name Description T Methods arguments Type Name Description IEnumerable<T> enumerable X Type Description bool True or false Checks if the Enumerable exists and has at least 1 item Remarks X Does not throw exception on null public static bool Is<T>(this IEnumerable<T> enumerable) X var list = new List<string>(); list.Add(\"hello world\"); var result = list.Is(); // result is true as the list contains 1 item List<string> list = null; var result = list.Is(); // result is false as the list is null X Generic types Name Description T Methods arguments Type Name Description IEnumerable<T> enumerable X Type Description bool True or false let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.IListStringExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.IListStringExtensions.html",
    "title": "IListStringExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll Extension methods for IList of strings IListStringExtensions public static class IListStringExtensions Inheritance object IListStringExtensions Examples Arguments X Methods Convert an IList of string to a new List of Enum Remarks X Does not Throw exception Tries to convert data through EnumValue and EnumText if match is found public static List<TEnum> ToEnumList<TEnum>(this IList<string> collection) where TEnum : struct, IComparable, IFormattable, IConvertible X Example: enum Cars { Car1, [EnumValue(\"Second car value\")] Car2, [EnumText(\"Third Car Display Text\")] Car3, [EnumText(\"Fourth Car Display Text\")] Car4 } var list = new List<string> { null, \"\", \"SECOND CAR VALUE\", \"car4\", \"fourth car display text\"}; var enums = list.ToEnumList<Cars>(); // enums[0] == Car1, null becomes the default value // enums[1] == Car1, empty string becomes the default value // enums[2] == Car2, case insensitive match // enums[3] == Car4, case insensitive match // enums[4] == Car4, case insensitive match X Generic types Name Description TEnum Methods arguments Type Name Description IList<string> collection X Type Description List<TEnum> A new list with 0 or more Enums let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.IPrincipalExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.IPrincipalExtensions.html",
    "title": "IPrincipalExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll Extension methods on System.Security.Principal.IPrincipal IPrincipalExtensions public static class IPrincipalExtensions Inheritance object IPrincipalExtensions Examples Arguments X Methods Check if principal is in any role, case sensitive Remarks X Passing Enum for roles to match, will simply call .ToString() on the EnumKey It ignores EnumValue attribute For that, you would simply use ToValue() on your Enum as argument to the method public static bool IsInAnyRole(this IPrincipal principal, params object[] roles) X Object array as argument: enum AdminRoles { Admin, MasterAdmin }; var roles = new object[] { AdminRoles.Admin, AdminRoles.MasterAdmin }; var isInAnyRole = principal.IsInAnyRole(roles); Strings as argument var isInAnyRole = principal.IsInAnyRole(\"Admin\", \"Guest\"); Enum as arg var isInAnyRole = principal.IsInAnyRole(AdminRoles.Admin, AdminRoles.MasterAdmin); X Methods arguments Type Name Description IPrincipal principal object[] roles X Type Description bool True of false let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.IntExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.IntExtensions.html",
    "title": "IntExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll IntExtensions public static class IntExtensions Inheritance object IntExtensions Examples Arguments X Methods Returns the value clamped between the specified min and max. public static int Clamp(this int value, int min = 0, int max = 9999) X var number = -1.Clamp(); // Number is now 0 as Clamp by default clamps between 0 and 9999 X Methods arguments Type Name Description int value int min int max X Type Description int let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ObjectExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ObjectExtensions.html",
    "title": "ObjectExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Json.dll This class contains extension methods on Object ObjectExtensions public static class ObjectExtensions Inheritance object ObjectExtensions Examples Arguments X Methods Join multiple arrays of same 'Enum' to an Array of that Enum Type public static TEnum[] AsEnumArray<TEnum>(this object[] objects) where TEnum : struct, IComparable, IFormattable, IConvertible X public enum Colors { Black, White, Red, Blue } var integers = new object[] { 1, 2, 3, 4 }; var colors = integers.AsEnumArray<Colors>(); // colors is now an array of 'Colors', with one of each of the values: // colors[0] == Black // colors[1] == White // ... // colors[3] == Blue public enum Colors { Black, White, Red, Blue } var texts = new object[] { \"Red\", \"Black\", \"White\" }; var colors = texts.AsEnumArray<Colors>(); // colors[1] == Black X Generic types Name Description TEnum Methods arguments Type Name Description object[] objects X Type Description TEnum[] An array of Enum Type Convert object to its json string representation with option to camelCase properties Remarks X Uses built-in custom json converters for int, datetime, Enum, etc. for instance Enum, with an EnumValue attribute, will be outputted as the EnumValue attribute and not the Enum.Key public static string Json(this object obj, bool camelCase) X // Assume camelCase argument true: class User { public string FirstName { get;set; } } var user = new User(); user.FirstName = \"Hello World\"; var json = user.Json(); var contains = json.Contains(\"firstName\") && json.Contains(\"Hello World\"); // contains is True, note that Json() has formatted 'FirstName' to 'firstName' when going from C# model to json string X Methods arguments Type Name Description object obj bool camelCase X Type Description string Returns json string representation of input, or null if input was so Convert object to its json string representation with option to pass Custom JsonConverters Remarks X Uses built-in custom json converters for int, datetime, Enum, etc. for instance Enum, with an EnumValue attribute, will be outputted as the EnumValue attribute and not the Enum.Key public static string Json(this object obj, JsonSerializerOptions options = null, bool translateUnicodeCodepoints = false, params JsonConverter[] jsonConverters) X class User { public string FirstName { get;set; } } class CustomConverter : JsonConverter... var user = new User(); user.FirstName = \"Hello World\"; var json = user.Json(new CustomConverter()); var isTrue = json.Contains(\"FirstName\") && json.Contains(\"Hello World\"); // isTrue is 'True' as FirstName is not camelCased by default and 'Hello World' is its value X Methods arguments Type Name Description object obj JsonSerializerOptions options bool translateUnicodeCodepoints JsonConverter[] jsonConverters X Type Description string Returns json string representation of input, or null if input was so Convert object to its json string representation with option to pass Custom JsonConverters Remarks X Uses built-in custom json converters for int, datetime, Enum, etc. for instance Enum, with an EnumValue attribute, will be outputted as the EnumValue attribute and not the Enum.Key public static string Json(this object obj, params JsonConverter[] jsonConverters) X class User { public string FirstName { get;set; } } class CustomConverter : JsonConverter... var user = new User(); user.FirstName = \"Hello World\"; var json = user.Json(new CustomConverter()); var isTrue = json.Contains(\"FirstName\") && json.Contains(\"Hello World\"); // isTrue is 'True' as FirstName is not camelCased by default and 'Hello World' is its value X Methods arguments Type Name Description object obj JsonConverter[] jsonConverters X Type Description string Returns json string representation of input, or null if input was so Convert object to its xml string representation public static string Xml(this object obj) X Methods arguments Type Name Description object obj X Type Description string let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ReadOnlySpanExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.ReadOnlySpanExtensions.html",
    "title": "ReadOnlySpanExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll Extension methods for ReadOnlySpan ReadOnlySpanExtensions public static class ReadOnlySpanExtensions Inheritance object ReadOnlySpanExtensions Examples Arguments X Methods Converts the ReadOnlySpan of Char to a byte array public static byte[] GetBytes(this ReadOnlySpan<char> span, Encoding encoding = null) X var textSpan = \"Hello World\".AsSpan(); var bytes = textSpan.GetBytes(); X Methods arguments Type Name Description ReadOnlySpan<char> span Encoding encoding X Type Description byte[] Byte array or null if input was so Checks if span is null or length is 0 public static bool IsNot<T>(this ReadOnlySpan<T> span) X var textSpan = \"Hello World\".AsSpan(); var isSpan = textSpan.IsNot(); // False, as span is not null, and has text length > 0 X Generic types Name Description T Methods arguments Type Name Description ReadOnlySpan<T> span X Type Description bool True or false Checks if span is not null and length is larger than 0 public static bool Is<T>(this ReadOnlySpan<T> span) X var textSpan = \"Hello World\".AsSpan(); var isSpan = textSpan.Is(); // True, span is not null X Generic types Name Description T Methods arguments Type Name Description ReadOnlySpan<T> span X Type Description bool True or false Convert a ReadOnlySpan of char to Base64 public static string ToBase64(this ReadOnlySpan<char> span, Encoding encoding = null) X var textSpan = \"Hello World\".AsSpan(); var base64 = textSpan.ToBase64(); X Methods arguments Type Name Description ReadOnlySpan<char> span Encoding encoding X Type Description string Base64 string or null if input was so let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.StreamExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.StreamExtensions.html",
    "title": "StreamExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Json.dll Extensions for streams like reading content as json directly into class through JsonAsync() StreamExtensions public static class StreamExtensions Inheritance object StreamExtensions Examples Arguments X Methods Reading a Stream async as JsonData converting it into a class T Used for instance when you read the content of a HttpResponse and directly converting it into T instead of storing as string first public static Task<T> JsonAsync<T>(this Stream stream, JsonSerializerOptions options = null, CancellationToken cancellationToken = default) X using (var contentStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false)) return await contentStream.JsonAsync<T>(jsonSerializerOptions).ConfigureAwait(false); X Generic types Name Description T Methods arguments Type Name Description Stream stream JsonSerializerOptions options CancellationToken cancellationToken X Type Description Task<T> T or default Reads a stream and hashing its content as MD5 Remarks X If data is larger than ~200 bytes then .ToSha1Hash() is faster public static string ToMD5Hash(this Stream stream) X var fileStream = new FileStream(@\"C:\\file.txt\", FileMode.Open); var hash = fileStream.ToMD5Hash(); X Methods arguments Type Name Description Stream stream X Type Description string Md5 hash or null if unreadable stream Reads a stream and hashing its content as MD5 Remarks X If data is larger than ~200 bytes then .ToSha1Hash() is faster public static Task<string> ToMD5HashAsync(this Stream stream) X var fileStream = new FileStream(@\"C:\\file.txt\", FileMode.Open); var hash = fileStream.ToMD5HashAsync().Result; X Methods arguments Type Name Description Stream stream X Type Description Task<string> Md5 hash or null if unreadable stream Reads a stream and hashing its content as Sha1 Remarks X If data is smaller than ~200 bytes then .ToMD5Hash() is faster public static string ToSha1Hash(this Stream stream) X var fileStream = new FileStream(@\"C:\\file.txt\", FileMode.Open); var hash = fileStream.ToSha1Hash(); X Methods arguments Type Name Description Stream stream X Type Description string Sha1 hash or null if unreadable stream Reads a stream and hashing its content as Sha1 Remarks X If data is smaller than ~200 bytes then .ToMD5Hash() is faster public static Task<string> ToSha1HashAsync(this Stream stream) X var fileStream = new FileStream(@\"C:\\file.txt\", FileMode.Open); var hash = fileStream.ToSha1HashAsync().Result; X Methods arguments Type Name Description Stream stream X Type Description Task<string> Sha1 hash or null if unreadable stream Reads a stream and hashing its content as Sha256 public static string ToSha256Hash(this Stream stream) X var fileStream = new FileStream(@\"C:\\file.txt\", FileMode.Open); var hash = fileStream.ToSha256Hash(); X Methods arguments Type Name Description Stream stream X Type Description string Sha256 hash or null if unreadable stream Reads a stream and hashing its content as Sha256 public static Task<string> ToSha256HashAsync(this Stream stream) X var fileStream = new FileStream(@\"C:\\file.txt\", FileMode.Open); var hash = fileStream.ToSha256HashAsync().Result; X Methods arguments Type Name Description Stream stream X Type Description Task<string> Sha256 hash or null if unreadable stream let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.StringBuilderExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.StringBuilderExtensions.html",
    "title": "StringBuilderExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll String Builder extensions StringBuilderExtensions public static class StringBuilderExtensions Inheritance object StringBuilderExtensions Examples Arguments X Methods Check if stringbuilder ends with a certain text public static bool EndsWith(this StringBuilder stringBuilder, string ending, bool caseInsensitive = false) X Methods arguments Type Name Description StringBuilder stringBuilder string ending bool caseInsensitive X Type Description bool True or false Returns a short string representation of the data through hashing and sample hashing If inputs length is less than or equal to 6 returns input obfuscated If inputs length exceeds 64 length, we hash only the start and end and create a finger print of up to 30 chars in between, avoidiing a lot of CPU for the risk of more collisions public static string GetCompressedId(this StringBuilder input) X Methods arguments Type Name Description StringBuilder input X Type Description string Replaces \" with \" and ' with a single quote within the StringBuilder Throws on null argument public static StringBuilder HtmlDecodeQuotes(this StringBuilder html, Dictionary<string, string> additionalReplacements = null) X Methods arguments Type Name Description StringBuilder html Dictionary<string, string> additionalReplacements X Type Description StringBuilder Replaces \" with \" and single quote with ' within the StringBuilder Throws on null argument public static StringBuilder HtmlEncodeQuotes(this StringBuilder html, Dictionary<string, string> additionalReplacements = null) X Methods arguments Type Name Description StringBuilder html Dictionary<string, string> additionalReplacements X Type Description StringBuilder Returns the index of the text within the StringBuilder public static int IndexOf(this StringBuilder stringBuilder, string text, bool ignoreCase = false, int start = 0) X Methods arguments Type Name Description StringBuilder stringBuilder string text The string to find bool ignoreCase if set to true it will ignore case int start The starting index. X Type Description int Int or -1 if not found Check if stringbuilder is not null and has content public static bool Is(this StringBuilder stringBuilder) X Methods arguments Type Name Description StringBuilder stringBuilder X Type Description bool True or false Check if stringbuilder is null or has no content public static bool IsNot(this StringBuilder stringBuilder) X Methods arguments Type Name Description StringBuilder stringBuilder X Type Description bool True or false Reduce the string builder to a fixed max length Does nothing if stringbuilder is null or less than or equal to the max length specified Remarks X Does not throw Returns null if null was input public static StringBuilder MaxLength(this StringBuilder stringBuilder, int maxLength) X var sb = new StringBuilder(\"hello world\"); sb.MaxLength(1); var text = sb.ToString(); // text == \"h\" X Methods arguments Type Name Description StringBuilder stringBuilder int maxLength Max amount of characters to keep X Type Description StringBuilder Check if stringbuilder ends with certain texts, if so, the first ending match was removed public static bool TrimEnd(this StringBuilder stringBuilder, params string[] values) X Methods arguments Type Name Description StringBuilder stringBuilder string[] values X Type Description bool True if text was removed, else false let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.TypeExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.TypeExtensions.html",
    "title": "TypeExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll This class contains extension methods for Type For instance: Inherits() TypeExtensions public static class TypeExtensions Inheritance object TypeExtensions Examples Arguments X Methods Returns a default instantiated value for value types, and null for reference types public static object Default(this Type type) X Methods arguments Type Name Description Type type X Type Description object Returns the first generic type specified, or null Optional: pass in higher index to return a different type argument public static Type GetTypeArgument(this Type type, int index = 0) X class Car { } var type = typeof(List<Car>); var genericType = type.GetTypeArgument(); // genericType is now 'typeof(Car)' X Methods arguments Type Name Description Type type int index X Type Description Type Returns all generic types found or null public static Type[] GetTypeArguments(this Type type) X class Car { } var type = typeof(List<Car>); var genericType = type.GetTypeArguments(); // genericType is now an array of Types with 1 item: 'typeof(Car)' X Methods arguments Type Name Description Type type X Type Description Type[] Returns the Name of the Type that makes 'most sense' For generics, such as a IList, List, Dictionary, it will return the Name of the first generic Type specified public static string GetTypeName(this Type type) X class Car { } var result = typeof(Car).GetTypeName(); // result is \"Car\" var list = new List<Car> var result = list.GetType().GetTypeName(); // result is \"Car\" var result = typeof(List<Car>).GetTypeName(); // result is \"Car\" var result = typeof(Car[]).GetTypeName(); // result is \"Car\" X Methods arguments Type Name Description Type type X Type Description string The type name Check if 'thisType' inherits or implements 'type False if both types are the same public static bool Inherits(this Type thisType, Type type) X class Car : IVehicle { } var result = typeof(Car).Inherits(typeof(IVehicle)); // result is true, as it inherits/implements IVehicle var result = typeof(Car).Inherits(typeof(Car)); // result is false, as Car cannot inherit/implement itself X Methods arguments Type Name Description Type thisType Type type X Type Description bool true or false Returns true if type is an anonymous type else false public static bool IsAnonymousType(this Type type) X Methods arguments Type Name Description Type type X Type Description bool Retruns true if the Type is a normal Class public static bool IsClassType(this Type type) X Methods arguments Type Name Description Type type X Type Description bool Checks if type is a dictionary public static bool IsDictionary(this Type type) X var dictionary = new Dictionary<string, string>(); var result = dictionary.IsDictionary(); //result is true X Methods arguments Type Name Description Type type X Type Description bool true or false Returns true if internal else false public static bool IsInternal(this Type type) X var t = typeof(Car); var isInternal = t.IsInternal(); X Methods arguments Type Name Description Type type X Type Description bool True or false Check if type is a KeyValuePair generic public static bool IsKeyValuePair(this Type type) X Methods arguments Type Name Description Type type X Type Description bool true or false Check if type is a list or array Remarks X Does not check on IList, nor Dictionary, just List or Array public static bool IsListOrArray(this Type type) X var array = new string[] { \"\" }; var result = array.GetType().IsListOrArray(); //result is true X Methods arguments Type Name Description Type type X Type Description bool true or false Returns true if type is nullable public static bool IsNullableType(this Type type) X Methods arguments Type Name Description Type type X Type Description bool Returns true if type is a number type, such as int, long, etc... public static bool IsNumberType(this Type type) X Methods arguments Type Name Description Type type X Type Description bool Set a static member on a Type, no matter if it is internal or private public static void SetStaticMember(this Type type, string memberName, object value) X Methods arguments Type Name Description Type type string memberName object value let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.UriExtensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.UriExtensions.html",
    "title": "UriExtensions",
    "summary": "NamespaceSystemLibrary.Common.Framework.Extensions SystemLibrary.Common.Framework.Net.dll This class contains extension methods for Uri For instance: GetPrimaryDomain(), etc... UriExtensions public static class UriExtensions Inheritance object UriExtensions Examples Arguments X Methods Returns the domain part of the uri or blank, never null: https://www.sub1.sub2.domain.com => domain.com public static string GetPrimaryDomain(this Uri uri, string topLevelDomain = \".com\") X var result = new Uri('https://systemlibrary.com/image?q=90&format=jpg').GetPrimaryDomain(); // result is \"systemlibrary.com\" var result = new Uri('https://systemlibrary.github.io/systemlibrary-common-framework/image?q=90&format=jpg').GetPrimaryDomain(); // result is \"github.io\" X Methods arguments Type Name Description Uri uri string topLevelDomain X Type Description string Primary domain name or \"\", never null let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Extensions.html",
    "title": "SystemLibrary.Common.Framework.Extensions",
    "summary": "SystemLibrary.Common.Framework.Extensions Classes ArrayExtensions This class contains extension methods for Arrays ByteArrayExtensions Byte array extensions ConcurrentDictionaryExtensions Concurrent dictionary extensions DynamicExtensions This class contains extension methods for Dynamic objects EnumExtensions Extension methods for Enums like ToText(), ToValue(), IsAny(), ... EnumExtensions<TEnum> This class contains extension methods for Enum as a Generic Type IEnumerableExtensions This class contains extension methods for IEnumerables IListStringExtensions Extension methods for IList of strings IPrincipalExtensions Extension methods on System.Security.Principal.IPrincipal IntExtensions ObjectExtensions This class contains extension methods on Object ReadOnlySpanExtensions Extension methods for ReadOnlySpan StreamExtensions Extensions for streams like reading content as json directly into class through JsonAsync() StringBuilderExtensions String Builder extensions TypeExtensions This class contains extension methods for Type For instance: Inherits() UriExtensions This class contains extension methods for Uri For instance: GetPrimaryDomain(), etc..."
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.FrameworkOptions.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.FrameworkOptions.html",
    "title": "FrameworkOptions",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.App.dll Framework service and middelware options FrameworkOptions public class FrameworkOptions Inheritance object FrameworkOptions Examples X Inside your startup.cs/program.cs... FrameworkOptions Options = new FrameworkOptions { }; public class CustomViewLocations : IViewLocationExpander { //...implement the interface public IEnumerable<string> ExpandViewLocations(ViewLocationExpanderContext context, IEnumerable<string> viewLocations) { return new string[] { \"~/Folder2/{0}/Index.cshtml\" } } } public void ConfigureServices(IServiceCollection services) { Options.UseMvc = false; // Options.ViewLocationExpander = new CustomViewLocations(); Options.ViewLocations = new string[] { \"~/Folder/{0}/Index.cshtml\", \"~/Folder/{1}/{0}.cshtml\" } app.AddFrameworkServices(Options); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { Options.UseHttpsRedirection = false; app.UseFrameworkMiddlewares(Options); } Arguments X Fields Optional: Additional endpoint configuration registered after RazorPages, Controllers, and ApiControllers, but before response compression middleware public Action<IEndpointRouteBuilder> AfterDefaultEndpoints X Field Value Type Description Action<IEndpointRouteBuilder> Add multiple assemblies as a 'part' so controllers within the assemblies are tried matched against requests public Assembly[] ApplicationParts X Field Value Type Description Assembly[] Pass in a string array of area view location formats Example: AreaViewLocations = new string[] { \"~/Area/{2}/{1}/{0}.cshtml\" }; Remarks X This sets area view locations public string[] AreaViewLocations X Simple example: var options = new FrameworkOptions(); options.ViewLocations = new string[] { \"~/Pages/{2}/{1}/{0}.cshtml\" } X Field Value Type Description string[] Optional: dditional endpoint configuration registered before RazorPages, Controllers and ApiControllers Remarks X These endpoints will be called after StaticFiles, Routing, CookiePolicy, OutputCache, Authentication and Authorization, but before MVC public Action<IEndpointRouteBuilder> BeforeDefaultEndpoints X Field Value Type Description Action<IEndpointRouteBuilder> Set directory path which contains the 'frameworkenc-SomePassword.key' file, and the filename will be used a the Global Encryption Key throughout the App whenever you invoke Encrypt or Decrypt For instance on windows it could be outside the application: C:\\src\\keys\\ Or it can be a relative folder within your application that is protected and not served, like app_data for both windows and linux support: ./app_data/ Relative folders must start with ./ public string EncKeyDir X Field Value Type Description string Set the cache-control max age header to a duration for all static requests Default: 14 days Remarks X Requires UseStaticFiles set to True, and the header 'max-age' cannot be added already in the response, if so this does nothing public int StaticFilesClientCacheSeconds X Field Value Type Description int Set the relative paths of where most static content is served from For example: new string[] { \"/static\", \"/public\" } This requires either you set env.WebRootPath before invoking the Options or that the built-in root path EnvironmentConfig.Current.ContentRootPath is what you want Remarks X Requires UseStaticFiles set to True public string[] StaticRequestPaths X Field Value Type Description string[] Adds middleware for Authorization and Authentication attributes public bool UseAuthentication X Field Value Type Description bool Adds middleware for Authorization attributes public bool UseAuthorization X Field Value Type Description bool Set to true to add services and middleware Gzip compression public bool UseBrotliResponseCompression X Field Value Type Description bool Set to true to add services and middleware for controllers and api controllers public bool UseControllers X Field Value Type Description bool Generates a single key file once, reusable across all environments, which expires in 100 years. Parent folder of 'ContentRoot' will be used as the destination for the key file - string extension methods EncryptUsingKeyRing and DecryptUsingKeyRing will use the generated file internally - cookies read over http will be encrypted and decrypted with the key file, if you host your app over several instances, they must all share the same key of course You can enable it and copy the key file out to the pipeline and other environments, and gitignore the file as it should be stored seperately public bool UseDataProtectionPolicy X Field Value Type Description bool Adds middleware which responds with a exception page usually used in development environments and test environments public bool UseDeveloperPage X Field Value Type Description bool Registers special Type Converters to the System.ComponentModel.TypeDescriptor For instance: it registers the .ToEnum() method as the primary method to convert a String to an Enum, so EnumValue and EnumText works Remarks X Note: This is used when converting data in a response to a Model within a GET or POST method for instance, do not mix it with JSON Serialization, thats something else public bool UseExtendedEnumModelConverter X Field Value Type Description bool Forwards all Microsoft.Extensions.Logging.ILogger log events to your custom ILogWriter. If enabled, an internal LogProvider is added to capture and route all logs to your LogWriter. public bool UseForwardILogger X Field Value Type Description bool Forwards all Log invocations to the std out and std err streams in your application. If enabled Log.Error() goes into the std err stream Console.Error.Write(), which hosting platforms capture and forward. public bool UseForwardLogToStd X Field Value Type Description bool Set to true to add services and middleware for forwarded headers public bool UseForwardedHeaders X Field Value Type Description bool Set to true to add services and middleware Gzip compression public bool UseGzipResponseCompression X Field Value Type Description bool Set to true to add middleware for using HSTS, which adds the Strict-Transport-Security header. Client side redirection public bool UseHsts X Field Value Type Description bool Set to true to add services and middleware to use http to https redirection public bool UseHttpsRedirection X Field Value Type Description bool Set to true to add MVC services NOTE: This also registers the controllers even if you try to set UseControllers to false NOTE: This registers a default media type output formatter, so all types are allowed served with exception of: .cs, .exe, .dll, .config, .iso, .dmg and a few more... public bool UseMvc X Field Value Type Description bool Set to true to register services and middleware for the OutputCache public bool UseOutputCache X Field Value Type Description bool Set to true to add ResponseCaching services public bool UseResponseCaching X Field Value Type Description bool Adds middleware for static files and sets a few default settings: - allows serving of unknown files types - compression is set to 'HttpsCompressionMode.Compress' - does not append a trailing slash for static files public bool UseStaticFilePolicy X Field Value Type Description bool Pass in an object that implements the interface if you want to extend View Locations Another option is to simply set 'ViewLocations' variable or 'AreaViewLocations' public IViewLocationExpander ViewLocationExpander X Field Value Type Description IViewLocationExpander Pass in a string array of view location formats Example: ViewLocations = new string[] { \"~/Pages/{1}/{0}.cshtml\" }; Remarks X This sets non-area view locations public string[] ViewLocations X Simple example: var options = new FrameworkOptions(); options.ViewLocations = new string[] { \"~/Pages/{2}/{1}/{0}.cshtml\" } X Field Value Type Description string[] Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.HttpContextInstance.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.HttpContextInstance.html",
    "title": "HttpContextInstance",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.App.dll An implementation of the 'old' thread safe singleton HttpContext we all know and love from .NET Framework HttpContextInstance public static class HttpContextInstance Inheritance object HttpContextInstance Examples Arguments X Properties Get the current Http Context instance Remarks X Do note that Http Context can be null in a console application or in a 'Unit' Test Application or if MVC is not yet registered as a service/invoked public static HttpContext Current { get; } X var httpContext = HttpContextInstance.Current; X Property Value Type Description HttpContext let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.ILogWriter.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.ILogWriter.html",
    "title": "ILogWriter",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll ILogWriter is responsible for storing log messages - Create a new class that implements ILogWriter - Register your class as singleton implementation of the ILogWriter ILogWriter public interface ILogWriter Examples X Program.cs/Startup.cs: public void ConfigureServices(IServiceCollection services) { services.AddSingleton(typeof(YourLogWriter), typeof(ILogWriter)); } OR: services.AddFrameworkServices<YourLogWriter>( Your LogWriter implementation: public class YourLogWriter : ILogWriter { public void Error(string message) { //Write message to slack? CloudWatch? Sentry.io? Local disc? Its up to you } ... } Usage // The hierarchy is as follows: Log.Write(\"hello world\"); Log.Critical(\"hello world\"); Log.Error(\"hello world\"); Log.Debug(\"hello world\"); Log.Warning(\"hello world\"); Log.Info(\"hello world\"); Log.Trace(\"hello world\"); All calls to method in 'Log' will create a message, append various data, and pass it to your log writer Arguments X Methods Implement the writing of critical messages void Critical(string message) X Methods arguments Type Name Description string message Implement the writing of debug messages void Debug(string message) X Methods arguments Type Name Description string message Implement the writing of error messages void Error(string message) X Methods arguments Type Name Description string message Implement the writing of information messages void Information(string message) X Methods arguments Type Name Description string message Implement the writing of trace messages void Trace(string message) X Methods arguments Type Name Description string message Implement the writing of warning messages void Warning(string message) X Methods arguments Type Name Description string message Implement the writing of warning messages Note: Write() will always be invoked, even if you disable logging in appSettings void Write(string message) X Methods arguments Type Name Description string message Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Metric.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Metric.html",
    "title": "Metric",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Metric class count metrics in memory and exposing it to Prometheus or the /metrics/ui endpoint if you are on Gold Tier license Metric public static class Metric Inheritance object Metric Examples Arguments X Methods Increase a metric by 1 for a specific label and segment public static void Inc(string label, string segment = null) X Increase cache metric hit and miss: Metric.Inc(\"cache\", \"hit\"); Metric.Inc(\"cache\", \"miss\"); // Results in one metric \"cache\" with two segments, hit and miss, with 1 count in each X Methods arguments Type Name Description string label Name of the Metric, 'The Pie Chart' if you will string segment Null or a specific segment to increase within the same 'Pie Chart' let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.MetricChartOption.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.MetricChartOption.html",
    "title": "MetricChartOption",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.App.dll Create a metric option and pass it into the Metric.Init method to control how the pie chart of a metric is rendered Note: A pie chart's key is made up of label + category + status, so if you specify the exact same label, category and status, it overrides the existing one MetricChartOption public class MetricChartOption Inheritance object MetricChartOption Examples Arguments X Fields MetricLabel is the same label you use when you invoke Meric.Inc(\"cache\"), to then define the look & feel of that pie chart Register a MetricLabel as null to register a default look & feel for all pie charts Registering the same MetricLabel again, will override the first one public string MetricLabel X Field Value Type Description string True to show animation upon loading pie chart metric UI public bool ShowAnimation X Field Value Type Description bool True to show a black border between each slice public bool ShowBorder X Field Value Type Description bool True to show the legend toolbar menu above the pie chart, which will hide the 'DisplayLabel' for the pie chart Need to know the DisplayLabel for a pie chart? Simply set ShowLegend to false and recompile and check public bool ShowLegend X Field Value Type Description bool Each slice in the pie chart with some styling options public SliceOption[] Slices X Field Value Type Description SliceOption[] Set the default text color of the pie chart Supports hex and rgb(0,0,0) public string TextColor X Field Value Type Description string Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.MetricCharts.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.MetricCharts.html",
    "title": "MetricCharts",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.App.dll Static class to adjust each pie chart generated on the /metrics/ui endpoint MetricCharts public static class MetricCharts Inheritance object MetricCharts Examples Arguments X Methods Configure a specific pie chart through adding a 'MetricChartOption' Use the same label in the option as you do when you increase the metric, to control which pie chart you configure public static void Add(MetricChartOption option = null) X Methods arguments Type Name Description MetricChartOption option let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.Randomness.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.Randomness.html",
    "title": "Randomness",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll Shortcut for generating random values using System.Random Randomness public static class Randomness Inheritance object Randomness Examples Arguments X Methods Generate a random Byte array public static byte[] Bytes(int length = 16) X Methods arguments Type Name Description int length X Type Description byte[] Byte array filled with random int's Generate a random Double public static double Double(double minValue = 1, double maxValue = 9999) X Methods arguments Type Name Description double minValue double maxValue X Type Description double Integer >= 0 Generate a random Integer public static int Int(int maxValue = 2147483647) X Methods arguments Type Name Description int maxValue X Type Description int Integer >= 0 Generate a random Integer public static int Int(int minValue, int maxValue) X Methods arguments Type Name Description int minValue int maxValue X Type Description int Integer >= 0 Generate a random string public static string String(int length = 6) X Methods arguments Type Name Description int length X Type Description string Returns a string of length let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.SliceOption.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.SliceOption.html",
    "title": "SliceOption",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.App.dll SliceOption public class SliceOption Inheritance object SliceOption Examples Arguments X Fields Background color for the slice, pass either rgb, hex or a default predefined browser color name Example 1: rgb(255, 100, 100) Example 2: #FF6464 Example 3: red public string Color X Field Value Type Description string Order of the slice in the pie chart Note: order 0 is first, then it increases and renders slices clockwise. An order of 9999999 will use a sort order based on Count, highest first public int Order X Field Value Type Description int Use the same segment text that you used when invoking Metric.Inc() to color and order it, or set segment to null to set a default color in the pie chart public string Segment X Field Value Type Description string Extension Methods ObjectExtensions.Json(object, bool) ObjectExtensions.Json(object, JsonSerializerOptions, bool, params JsonConverter[]) ObjectExtensions.Json(object, params JsonConverter[]) ObjectExtensions.Xml(object) let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.SystemType.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.SystemType.html",
    "title": "SystemType",
    "summary": "NamespaceSystemLibrary.Common.Framework SystemLibrary.Common.Framework.Net.dll A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. SystemType public static class SystemType Inheritance object SystemType Examples Arguments X Fields A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type BoolType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type BoolTypeNullable X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type ByteArrayType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type ByteType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type CharType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DateTimeOffsetType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DateTimeOffsetTypeNullable X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DateTimeType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DateTimeTypeNullable X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DecimalType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DelegateType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DictionaryGenericType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DoubleType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type DoubleTypeNullable X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type EnumTextAttributeType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type EnumValueAttributeType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type ExceptionType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type FloatType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type GuidType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type ICollectionGenericType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type ICollectionType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type IDictionaryGenericType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type IDictionaryType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type IListGenericType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type IListType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type Int16Type X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type Int16TypeNullable X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type Int64Type X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type Int64TypeNullable X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type IntArrayType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type IntType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type IntTypeNullable X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type KeyValuePairType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type ListGenericType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type NullableType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type ObjectType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type StringBuilderType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type StringType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type TimeSpanType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type TimeSpanTypeNullable X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type TupleType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type UInt64Type X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type UIntType X Field Value Type Description Type A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. public static Type UriType X Field Value Type Description Type let wrapperCloseModalClickEnabled = false; function getItems(selector) { return document.querySelectorAll(selector); } //CLASS FUNCTIONS function getClassOrInterfaceNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i] === \"class\") { return i + 1; } if (parts[i] === \"interface\") { return i + 1; } if (parts[i] === \"enum\") { return i + 1; } } return 0; } function getClassGenericStartIndex(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\") && part.includes(\">\")) { return part.indexOf(\"<\"); } if (part.includes(\"<\") && part.includes(\",\")) { return part.indexOf(\"<\"); } return 0; } function classHasMultipleGenerics(parts, classNameIndex) { let part = parts[classNameIndex]; if (part.includes(\"<\")) { if (part.includes(',')) { return true; } } return false; } function getClassName(parts, classNameIndex) { var genericStartIndex = getClassGenericStartIndex(parts, classNameIndex); var hasMultipleGenerics = classHasMultipleGenerics(parts, classNameIndex); if (genericStartIndex > 0) { parts[classNameIndex] = parts[classNameIndex].substring(0, genericStartIndex); if (hasMultipleGenerics) { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-multigeneric\"><></span>'; } else { return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span><span class=\"class-generic\"><></span>'; } } return '<span class=\"classNameHeading\">' + parts[classNameIndex] + '</span>'; } function cleanCssName(text) { if (text) { text = text.replace('>', '').replace('<', '').replace('.', '').replace(']', '').replace('[', ''); text = text.replace(' ', '').replace('(', '').replace(')', '').replace(',', ''); text = text.replace('=', '').replace('?', '').replace(';', '').replace('!', ''); var genericIndex = text.indexOf('&lt'); if (genericIndex > 0) { text = text.substring(0, genericIndex) + \"_generic_\"; } else { text = text.replace('&', ''); } text = text.toLowerCase(); if (text.includes('attributeusage')) { text = 'attributeusage'; } return text; } return \"\"; } function updateClassNames() { var items = getItems(\".h1-custom-display.className\"); //.text-break.h1-class-header for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 4 || !value.includes(' ')) { console.warn(\"Class is wrong: \" + value); continue; } var parts = value.split(' '); var classNameIndex = getClassOrInterfaceNameIndex(parts); var startIndex = 0; var tempIndex = classNameIndex; while (tempIndex > 1) { startIndex++; tempIndex--; } for (var j = 0; j < parts.length; j++) { if (j < startIndex) { parts[j] = \"\"; } else if (j > classNameIndex || parts[j] === \"sealed\" || parts[j] === \"public\") { parts[j] = \"\"; } else if (j === classNameIndex) { parts[classNameIndex] = getClassName(parts, classNameIndex); } else { var cleanedClassSuffix = cleanCssName(parts[j]); if (cleanedClassSuffix !== null && cleanedClassSuffix.length > 1) { parts[j] = \"<span class='classNameHeader className--\" + cleanedClassSuffix + \"'>\" + parts[j] + \"</span> \"; } } } var innerHtml = parts.join(''); items[i].innerHTML = innerHtml + \"<p class='classMargin'>{</p>\"; } } //CLASS FUNCTIONS END //FUNCTION FUNCTIONS function getFunctionNameIndex(parts) { for (var i = 0; i < parts.length; i++) { if (parts[i].startsWith('[') || parts[i] === \"\" || parts[i] === \" \") { continue; } var index = parts[i].indexOf('('); if (index > 0) { var greaterthan = parts[i].indexOf(\">\"); if (greaterthan == -1) { //Non-generic function return i; } var lessthan = parts[i].indexOf(\"<\"); if (lessthan == - 1) { return i - 1; } return i; } } return 0; } function functionIsGeneric(parts, functionNameIndex) { var part = parts[functionNameIndex]; var isGeneric = part.indexOf(\">\") >= 0 || part.indexOf(\"<\") >= 0; if (isGeneric) { var genericStart = part.indexOf(\">\"); var argumentsStart = part.indexOf('('); if (argumentsStart > 0 && genericStart > 0) { return genericStart < argumentsStart; } } return isGeneric; } function functionHasMultipleGenerics(parts, functionNameIndex) { var part = parts[functionNameIndex]; return part.indexOf(\"<\") >= 0 && part.indexOf(\">\") === -1 } function functionHasArguments(parts, functionNameIndex) { var p = parts[functionNameIndex]; var emptyArguments = p.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } if (p.indexOf(',') >= 0) { var nextPart = parts[functionNameIndex + 1]; emptyArguments = nextPart.includes(\"()\"); if (emptyArguments) { return !emptyArguments; } else { //Multigeneric function here for (var i = functionNameIndex + 1; i < parts.length; i++) { if (parts[i].indexOf('(') >= 0) { emptyArguments = parts[i].includes(\"()\"); break; } } return !emptyArguments; } } else { if (parts[functionNameIndex + 1].indexOf(',') >= 0) { //Multigeneric function here } } return !emptyArguments; } function getFunctionName(parts, functionNameIndex) { var part = parts[functionNameIndex]; var hasArguments = functionHasArguments(parts, functionNameIndex); var isGeneric = functionIsGeneric(parts, functionNameIndex); var isMultiGeneric = functionHasMultipleGenerics(parts, functionNameIndex); var genericStartIndex = part.indexOf('<'); var funcStartIndex = part.indexOf('('); if (genericStartIndex >= 0) { part = part.substring(0, genericStartIndex); } if (funcStartIndex >= 0) { part = part.substring(0, funcStartIndex); } var arg = hasArguments ? \"<span class='custom-arguments custom-arguments-onclick'>( )</span>\" : \"<span class='custom-arguments custom-arguments-onclick custom-arguments--none'>( )</span>\"; part = \"<span class='custom-name custom-name-onclick'>\" + part + \"</span>\"; if (isMultiGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-multigeneric'><></span>\" + arg; } else if (isGeneric) { return part + \"<span class='custom-arguments custom-arguments-onclick function-generic'><></span>\" + arg; } return part + arg; } function updateFunctionNames() { var items = getItems(\".h4-custom-functionName\"); for (var i = 0; i < items.length; i++) { var value = items[i].innerHTML; if (!value || value.length < 5 || !value.includes(' ') || !value.includes('(')) { items[i].classList.add(\"non-function-element\"); let isClickable = false; if (value.includes('{') && value.includes('}')) { items[i].classList.add(\"custom-property-name\"); items[i].classList.add(\"custom-property-name-onclick\"); var dataContainerTemp = items[i].nextElementSibling; if (dataContainerTemp && dataContainerTemp.classList.contains('custom-menu-data-container')) { var propertyCustomMenuData = dataContainerTemp.getElementsByClassName('custom-menu-data-name'); if (typeof propertyCustomMenuData !== 'undefined' && propertyCustomMenuData && propertyCustomMenuData.length) { var propertyCustomMenuDataFirst = propertyCustomMenuData[0]; if (propertyCustomMenuDataFirst) { propertyCustomMenuDataFirst.classList.remove('custom-menu-data-name'); propertyCustomMenuDataFirst.classList.add('custom-menu-data-property-name'); isClickable = true; } } } } else { if (value.includes('protected ') || value.includes('private ') || value.includes('public ')) { items[i].classList.add(\"field-name\"); } } items[i].innerHTML = items[i].innerHTML.replace('readonly ', '').replace('public ', '').replace('override ', '').replace('protected ', ''); if (isClickable === true) { let txt = items[i].innerHTML; if (txt && txt.length > 5 && txt[0] !== ' ') { txt = txt.replace(\" \", \"|<span|class='property-name-text'>\"); txt = txt.replace(\" \", \"</span> \"); txt = txt.replace(\"|\", \" \").replace(\"|\", \" \"); items[i].innerHTML = txt; } } items[i].innerHTML = items[i].innerHTML.replace('static ', '<span class=\"field-static-colored\">static </span>'); continue; } if (value.includes('[DocFxHide]')) { let parent = items[i].parentNode; if (parent) { if (parent.parentNode !== null && parent.parentNode.classList.contains(\"custom-container\")) { parent.parentNode.classList.add(\"docfxhide-attribute\"); } else { parent.classList.add(\"docfxhide-attribute\"); } } else { items[i].classList.add(\"docfxhide-attribute\"); } continue; } var parts = value.split(' '); var functionNameIndex = getFunctionNameIndex(parts); parts[functionNameIndex] = getFunctionName(parts, functionNameIndex); for (var j = 0; j < parts.length; j++) { if (j > functionNameIndex || parts[j] === \"public\" || parts[j].startsWith(\"[\") || parts[j].endsWith(\"]\")) { parts[j] = \"\"; } else if (j < functionNameIndex) { parts[j] = \"<span class='custom-keywords custom-keywords--\" + cleanCssName(parts[j]) + \"'>\" + parts[j] + \"</span> \"; } } parts = parts.filter(x => typeof (x) !== 'undefined' && x !== \"\" && x !== null && x !== \" \"); /*var argumentsPart = parts[parts.length-1]; if(argumentsPart) { argumentsPart = \"<span class='custom-arguments custom-arguments-onclick'>\" + argumentsPart + \"</span>\"; parts[parts.length-1] = argumentsPart; }*/ if (parts.length > 1) { var returnTypePart = parts[parts.length - 2]; if (returnTypePart) { returnTypePart = returnTypePart.replace('custom-keywords', '').replace('custom-keywords', ''); returnTypePart = \"<span class='custom-returntype custom-returntype-onclick'>\" + returnTypePart + \"</span>\"; parts[parts.length - 2] = returnTypePart; } } var innerHtml = parts.join(' '); innerHtml = innerHtml.toString() .replace('override', '') .replace('override', '') .replace('protected', '') .replace('protected', ''); items[i].innerHTML = innerHtml; } //Show 'view source' link for the class constructor next to 'Example' if (items != null && items.length > 0) { if (items[0] != null && items[0].id != null && items[0].id.includes('__ctor_') === true) { var viewSources = getItems('.custom-source-code-link-container'); if (viewSources != null && viewSources.length > 0) { if (viewSources.length > 1) { viewSources[0].classList.add('custom-source-code-link-container--class'); } } } } } function addEventsToTabCloseButtons() { var i; var closeButtons = document.getElementsByClassName(\"syslib-tab-menu-data--close\"); for (i = 0; i < closeButtons.length; i++) { closeButtons[i].addEventListener(\"click\", function () { wrapperCloseModalClickEnabled = false; let par = this.parentNode; if (par.style.display === \"block\") { par.style.display = \"none\"; if (par && par.classList && par.classList.contains('active')) { par.classList.toggle('active'); } //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } }) } setTimeout(() => { var sidetocs = document.getElementsByClassName('sidetoc'); if (sidetocs) { let wrapper = sidetocs[0]; if (wrapper) { wrapper.addEventListener('click', function () { if (wrapperCloseModalClickEnabled === true) { wrapperCloseModalClickEnabled = false; var activeElements = document.getElementsByClassName('active'); if (activeElements) { for (var i = 0; i < activeElements.length; i++) { let activeEle = activeElements[i]; if (activeEle && activeEle.style && activeEle.style.display === 'block') { activeEle.style.display = 'none'; activeEle.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } } } } }); } } }, 177 ); } function addRemarksOnClickEvent(className) { var remarks = document.getElementsByClassName(className); if (remarks) { for (var i = 0; i < remarks.length; i++) { var remark = remarks[i]; if (remark && remark.classList) { var closeBtns = remark.parentNode.getElementsByClassName('custom-remarks-menu-data--close'); if (closeBtns) { var closeBtn = closeBtns[0]; if (closeBtn) { closeBtn.addEventListener(\"click\", function (e) { e.target.parentNode.classList.toggle('visible'); }); } } remark.addEventListener(\"click\", function (e) { var remarkTexts = e.target.parentNode.getElementsByClassName(className + ' text'); if (!remarkTexts || !remarkTexts.length) { remarkTexts = e.target.parentNode.parentNode.getElementsByClassName(className + ' text'); } if (remarkTexts && remarkTexts.length) { var remarkText = remarkTexts[0]; if (remarkText) { remarkText.classList.toggle('visible'); } } }); } } } } function addEventDisplayMenuDataOnClickPart(partName) { var i; var parts = document.getElementsByClassName(\"custom-\" + partName + \"-onclick\"); var menuDataClass = 'custom-menu-data-' + partName; for (i = 0; i < parts.length; i++) { var container = parts[i]; while (container) { container = container.parentNode; if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } } if (container) { var menuDataCollection = container.getElementsByClassName(menuDataClass); if (typeof (menuDataCollection) === 'undefined' || !menuDataCollection) { continue; } var menuData = menuDataCollection[0]; //MenuData do not exist at all, change button layout to red if (!menuData || !menuData.classList || !menuData.classList.contains(menuDataClass)) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && h4[0].id.includes('_ctor_')) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } parts[i].classList.toggle('custom-menu-data-no-text'); } } else { //MenuData is empty or contains only the \"X\" button, change button layout to red if (typeof menuData.children === 'undefined' || menuData.children === null || menuData.children.length <= 1) { if (menuDataClass.includes('-class-') >= 1) { parts[i].classList.toggle('hidden'); } else { var h4 = container.getElementsByClassName('h4-custom-functionName'); if (h4 && h4.length && h4.length > 0 && h4[0] && h4[0].id && (h4[0].id.includes('_ctor_') || h4[0].classList.contains('non-function-element'))) { //CTOR has no example, then just hide the whole CTOR line container.classList.toggle('hidden'); } else { parts[i].classList.toggle('custom-menu-data-no-text'); } } } } } } for (i = 0; i < parts.length; i++) { if (parts[i].classList.contains('custom-menu-data-no-text')) { continue; } parts[i].addEventListener(\"click\", function (e) { e.preventDefault(); e.stopPropagation(); var container = this.parentNode; while (container) { if (container && container.classList && container.classList.contains('custom-menu-data')) { break; } if (container && container.classList && container.classList.contains('col-md-10')) { break; } container = container.parentNode; } if (container) { var menuData = container.getElementsByClassName(menuDataClass)[0]; if (menuData && menuData.classList && menuData.classList.contains(menuDataClass)) { if (menuData.classList.contains('active')) { //Hide current Menu Data if clicking the \"function name\" again menuData.style.display = \"none\"; menuData.classList.toggle('active'); //Show footer when modal is not active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } } else { //Hide footer when modal is active var footer = document.getElementById(\"page-footer\"); if (footer && footer.classList) { if (!footer.classList.contains('hidden')) { footer.classList.toggle('hidden'); } } //Hide all existing Menu Data's var menuDatas = document.getElementsByClassName(menuDataClass); if (menuDatas && menuDatas.length) { for (var j = 0; j < menuDatas.length; j++) { if (menuDatas[j].classList.contains('active')) { menuDatas[j].classList.toggle('active'); menuDatas[j].style.display = 'none'; } } } //Show just one Menu Data, the one we clicked menuData.style.display = \"block\"; menuData.classList.toggle('active'); setTimeout(() => { wrapperCloseModalClickEnabled = true; }, 25); } } } }); } } function removeEmptyPopup(query) { var popup = document.getElementsByClassName(query); if (popup) { for (var i = 0; i < popup.length; i++) { if (popup[i]) { var data = popup[i].nextElementSibling; if (!data || data.childElementCount <= 1) { popup[i].remove(); i = i - 1; } } } } } function removeEmptyPopups() { removeEmptyPopup(\"custom-menu-data-class-arguments\"); removeEmptyPopup(\"custom-menu-data-class-example\"); removeEmptyPopup(\"custom-menu-data-name\"); removeEmptyPopup(\"custom-menu-data-arguments\"); removeEmptyPopup(\"custom-menu-data-returntype\"); removeEmptyPopup(\"custom-menu-data-container\"); } function hideAllEmptyMarkdowns() { var items = getItems('.markdown.level1.summary.member-summary'); if (items && items.length) { for (var i = 0; i < items.length; i++) { if (items[i].children && items[i].children.length === 0) { items[i].classList.add(\"hidden\"); } if (items[i].value) { if (items[i].value.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerHTML) { if (items[i].innerHTML.length <= 1) { items[i].classList.add(\"hidden\"); } } if (items[i].innerText) { if (items[i].innerText.length <= 1) { items[i].classList.add(\"hidden\"); } } } } } function hideSourceLinksForDocfxHideAttribute() { var items = getItems('.custom-source-code-link-container'); if (items != null && items.length > 0) { for (var i = 0; i < items.length; i++) { var next = items[i].nextElementSibling; if (!next.classList.contains('custom-menu-data')) { next = next.nextElementSibling; } if (next.classList.contains('custom-menu-data')) { var docfxhideElement = next.getElementsByClassName('docfxhide-attribute'); if (docfxhideElement !== null && docfxhideElement.length !== null && docfxhideElement.length === 1) { items[i].classList.add('docfxhide-attribute'); } } } } } function hideSummariesInheritedFromClass() { const topSummary = document.querySelector('.markdown.level0.summary.h1-class-summary p'); if (!topSummary || !topSummary.innerHTML) return; const topHtmlText = topSummary.innerHTML.trim(); document.querySelectorAll('.markdown.level1.summary.member-summary').forEach(div => { const p = div.querySelector('p'); if (p && p.innerHTML.trim() === topHtmlText) { p.classList.add('hidden'); } }); } function hideRemarksInheritedFromClass() { const topRemark = document.querySelector('.custom-remarks.custom-remarks1.class-remarks h5'); if (!topRemark || !topRemark.innerHTML) return; const topHtmlRemark = topRemark.innerHTML.trim(); document.querySelectorAll('.custom-remarks.custom-remarks2').forEach(div => { const h5 = div.querySelector('h5'); if (h5 && h5.innerHTML.trim() === topHtmlRemark) { h5.classList.add('hidden'); } }); } function hideConstructorSummaryRemarksAndViewSource() { const h3 = document.querySelector('h3#constructors'); const next = h3?.nextElementSibling; if (next?.classList?.contains('custom-container') == true) { next.classList.add('hidden'); } } //FUNCTION FUNCTIONS END setTimeout(updateFunctionNames, 5); setTimeout(hideSummariesInheritedFromClass, 5); setTimeout(hideRemarksInheritedFromClass, 5); setTimeout(updateClassNames, 5); setTimeout(hideConstructorSummaryRemarksAndViewSource, 10); setTimeout(() => hideSourceLinksForDocfxHideAttribute(), 33); setTimeout(() => hideAllEmptyMarkdowns(), 33); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-example'), 75); setTimeout(() => addEventDisplayMenuDataOnClickPart('class-arguments'), 80); setTimeout(() => addEventDisplayMenuDataOnClickPart('name'), 85); setTimeout(() => addEventDisplayMenuDataOnClickPart('property-name'), 90); //NOTE: Disabled clicking on args and return type - the sample should give enough info //setTimeout(() => addEventDisplayMenuDataOnClickPart('arguments'), 40); //setTimeout(() => addEventDisplayMenuDataOnClickPart('returntype'), 40); setTimeout(addEventsToTabCloseButtons, 105); setTimeout(() => addRemarksOnClickEvent('custom-remarks1'), 110); setTimeout(() => addRemarksOnClickEvent('custom-remarks2'), 110); // setTimeout(removeEmptyPopups, 60); }"
  },
  "systemlibrary.common.framework/SystemLibrary.Common.Framework.html": {
    "href": "systemlibrary.common.framework/SystemLibrary.Common.Framework.html",
    "title": "SystemLibrary.Common.Framework",
    "summary": "SystemLibrary.Common.Framework Classes Assemblies Static functions on whitelisted loaded assemblies Async Run methods asynchronously without blocking. Clock A Clock to measure an actions execution time based on Stopwatch Config<T> Loads and reads configuration files (.xml, .json, or .config), applies transformations, and decrypts encrypted properties. Configs can be placed in: ~/*.json, ~/*.xml, ~/Configs/**, ~/Configurations/**, or appended to appsettings.json. Transformations use the ASPNETCORE_ENVIRONMENT variable. Set ASPNETCORE_ENVIRONMENT in: - launchSettings.json (IIS Express/Kestrel) - web.config (IIS/IIS Express) - mstest.runsettings (unit tests) - command-line --configuration (executables) DateJsonConverter Use to convert a DateTime into a string date 'yyyy-MM-dd', ignoring time DateTimeJsonConverter Use to convert a string to DateTime during Json() invocation with your own format DateTimeOffsetJsonConverter DateTime json converter that takes a string format DelegateJsonConverter EnumTextAttribute Decorate the enum key with text. EnumValueAttribute Decorate the enum key with a value. EnvironmentConfig Standard class for environmental configurations read from environmentConfig.json if exists If you've added more properties to environmentConfig.json than just the 'Name' you'd have to inherit 'EnvironmentConfig<YourClass>' and use that instead EnvironmentConfig<T, TEnvironmentNameEnum> EnvironmentConfig with an option to pass your own Configuration class, along with an enum that defines all environment names. FrameworkOptions Framework service and middelware options HttpContextInstance An implementation of the 'old' thread safe singleton HttpContext we all know and love from .NET Framework Metric Metric class count metrics in memory and exposing it to Prometheus or the /metrics/ui endpoint if you are on Gold Tier license MetricChartOption Create a metric option and pass it into the Metric.Init method to control how the pie chart of a metric is rendered Note: A pie chart's key is made up of label + category + status, so if you specify the exact same label, category and status, it overrides the existing one MetricCharts Static class to adjust each pie chart generated on the /metrics/ui endpoint Randomness Shortcut for generating random values using System.Random SliceOption SystemType A static class containing common typeof calls to optimize performance, as typeof can be slow. Use these predefined types whenever possible. Interfaces ILogWriter ILogWriter is responsible for storing log messages - Create a new class that implements ILogWriter - Register your class as singleton implementation of the ILogWriter Enums EnvironmentName Enum list of common built-in environment names allowed Config tranformations and EnvironmentName will work with other env-names, but the IsLocal, IsTest, and IsProd will not"
  }
}